GAS LISTING /tmp/ccYLWH9O.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv13sysCallWraperEz
   9              	_ZN5Riscv13sysCallWraperEz:
  10              	.LFB44:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** // Created by marko on 20.4.22..
   3:src/riscv.cpp **** //
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** #include "../h/riscv.hpp"
   6:src/riscv.cpp **** #include "../h/tcb.hpp"
   7:src/riscv.cpp **** #include "../lib/console.h"
   8:src/riscv.cpp **** #include "../test/printing.hpp"
   9:src/riscv.cpp **** #include "../h/ABIWrappers.hpp"
  10:src/riscv.cpp **** 
  11:src/riscv.cpp **** 
  12:src/riscv.cpp **** void Riscv::sysCallWraper(...){
  12              		.loc 1 12 31
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  13:src/riscv.cpp ****     __asm__ volatile("ecall");
  20              		.loc 1 13 5
  21              		.loc 1 13 30 is_stmt 0
  22              	#APP
  23              	# 13 "src/riscv.cpp" 1
  14              	}
  24              		ecall
  25              	# 0 "" 2
  26              		.loc 1 14 1
  27              	#NO_APP
  28 0010 03348100 		ld	s0,8(sp)
  29              		.cfi_restore 8
  30              		.cfi_def_cfa 2, 16
  31 0014 13010101 		addi	sp,sp,16
  32              		.cfi_def_cfa_offset 0
  33 0018 67800000 		jr	ra
  34              		.cfi_endproc
  35              	.LFE44:
  37              		.align	2
  38              		.globl	_ZN5Riscv10popSppSpieEv
  40              	_ZN5Riscv10popSppSpieEv:
  41              	.LFB45:
  15:src/riscv.cpp **** 
  16:src/riscv.cpp **** void Riscv::popSppSpie()
  17:src/riscv.cpp **** {
  42              		.loc 1 17 1 is_stmt 1
  43              		.cfi_startproc
GAS LISTING /tmp/ccYLWH9O.s 			page 2


  44 001c 130101FF 		addi	sp,sp,-16
  45              		.cfi_def_cfa_offset 16
  46 0020 23348100 		sd	s0,8(sp)
  47              		.cfi_offset 8, -8
  48 0024 13040101 		addi	s0,sp,16
  49              		.cfi_def_cfa 8, 0
  18:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  50              		.loc 1 18 5
  51              		.loc 1 18 38 is_stmt 0
  52              	#APP
  53              	# 18 "src/riscv.cpp" 1
  19              	    __asm__ volatile("sret");
  54              		csrw sepc, ra
  55              	# 0 "" 2
  56              		.loc 1 19 5 is_stmt 1
  57              		.loc 1 19 29 is_stmt 0
  58              	# 19 "src/riscv.cpp" 1
  20              	}
  59              		sret
  60              	# 0 "" 2
  61              		.loc 1 20 1
  62              	#NO_APP
  63 0030 03348100 		ld	s0,8(sp)
  64              		.cfi_restore 8
  65              		.cfi_def_cfa 2, 16
  66 0034 13010101 		addi	sp,sp,16
  67              		.cfi_def_cfa_offset 0
  68 0038 67800000 		jr	ra
  69              		.cfi_endproc
  70              	.LFE45:
  72              		.align	2
  73              		.globl	_ZN5Riscv5popA0Ev
  75              	_ZN5Riscv5popA0Ev:
  76              	.LFB46:
  21:src/riscv.cpp **** 
  22:src/riscv.cpp **** void Riscv::popA0(){
  77              		.loc 1 22 20 is_stmt 1
  78              		.cfi_startproc
  79 003c 130101FE 		addi	sp,sp,-32
  80              		.cfi_def_cfa_offset 32
  81 0040 233C8100 		sd	s0,24(sp)
  82              		.cfi_offset 8, -8
  83 0044 13040102 		addi	s0,sp,32
  84              		.cfi_def_cfa 8, 0
  23:src/riscv.cpp ****     uint64 scause = r_scause();
  85              		.loc 1 23 5
  86              	.LBB33:
  87              	.LBB34:
  88              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by marko on 20.4.22..
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   6:src/../h/riscv.hpp **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_2_INTERRUPT_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
GAS LISTING /tmp/ccYLWH9O.s 			page 3


   9:src/../h/riscv.hpp **** 
  10:src/../h/riscv.hpp **** class Riscv
  11:src/../h/riscv.hpp **** {
  12:src/../h/riscv.hpp **** public:
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     static void popA0();
  15:src/../h/riscv.hpp **** 
  16:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  17:src/../h/riscv.hpp ****     static void popSppSpie();
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // read register scause
  20:src/../h/riscv.hpp ****     static uint64 r_scause();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // write register scause
  23:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // read register sepc
  26:src/../h/riscv.hpp ****     static uint64 r_sepc();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // write register sepc
  29:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // read register stvec
  32:src/../h/riscv.hpp ****     static uint64 r_stvec();
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // write register stvec
  35:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // read register stval
  38:src/../h/riscv.hpp ****     static uint64 r_stval();
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // write register stval
  41:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     enum BitMaskSip
  44:src/../h/riscv.hpp ****     {
  45:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  46:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  47:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  48:src/../h/riscv.hpp ****     };
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // mask set register sip
  51:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // mask clear register sip
  54:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // read register sip
  57:src/../h/riscv.hpp ****     static uint64 r_sip();
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // write register sip
  60:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     enum BitMaskSstatus
  63:src/../h/riscv.hpp ****     {
  64:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  65:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
GAS LISTING /tmp/ccYLWH9O.s 			page 4


  66:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  67:src/../h/riscv.hpp ****     };
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // mask set register sstatus
  70:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // mask clear register sstatus
  73:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // read register sstatus
  76:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // write register sstatus
  79:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // supervisor trap
  82:src/../h/riscv.hpp ****     static void supervisorTrap();
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     static void pushRegisters();
  85:src/../h/riscv.hpp **** 
  86:src/../h/riscv.hpp ****     static void popRegisters();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** // read register ao
  90:src/../h/riscv.hpp ****     static uint64 r_a0();
  91:src/../h/riscv.hpp **** // read register a1
  92:src/../h/riscv.hpp ****     static uint64 r_a1();
  93:src/../h/riscv.hpp **** // read register a2
  94:src/../h/riscv.hpp ****     static uint64 r_a2();
  95:src/../h/riscv.hpp **** // read register a3
  96:src/../h/riscv.hpp ****     static uint64 r_a3();
  97:src/../h/riscv.hpp **** // read register a4
  98:src/../h/riscv.hpp ****     static uint64 r_a4();
  99:src/../h/riscv.hpp **** 
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp ****     //system id codes enum
 102:src/../h/riscv.hpp ****     enum sysId{
 103:src/../h/riscv.hpp ****         memAlloc = 0x01,
 104:src/../h/riscv.hpp ****         memFree = 0x02,
 105:src/../h/riscv.hpp ****         threadCreate = 0x11,
 106:src/../h/riscv.hpp ****         threadExit = 0x12,
 107:src/../h/riscv.hpp ****         threadDispatch = 0x13,
 108:src/../h/riscv.hpp ****         semOpen = 0x21,
 109:src/../h/riscv.hpp ****         semClose = 0x22,
 110:src/../h/riscv.hpp ****         semWait = 0x23,
 111:src/../h/riscv.hpp ****         semSignal = 0x24,
 112:src/../h/riscv.hpp ****         semTrywait = 0x26,
 113:src/../h/riscv.hpp ****         //------------------ za 20p
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp ****         semTimedwait = 0x25,
 116:src/../h/riscv.hpp ****         timeSleat = 0x31,
 117:src/../h/riscv.hpp ****         getC = 0x41,
 118:src/../h/riscv.hpp ****         putC = 0x42
 119:src/../h/riscv.hpp ****     };
 120:src/../h/riscv.hpp ****     static void sysCallWraper(...);
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** private:
GAS LISTING /tmp/ccYLWH9O.s 			page 5


 123:src/../h/riscv.hpp **** 
 124:src/../h/riscv.hpp ****     // supervisor trap handler
 125:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** 
 129:src/../h/riscv.hpp **** };
 130:src/../h/riscv.hpp **** 
 131:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 132:src/../h/riscv.hpp **** {
 133:src/../h/riscv.hpp ****     uint64 volatile scause;
  89              		.loc 2 133 5
 134:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  90              		.loc 2 134 5
  91              		.loc 2 134 72 is_stmt 0
  92              	#APP
  93              	# 134 "src/../h/riscv.hpp" 1
 135              	    return scause;
  94              		csrr a5, scause
  95              	# 0 "" 2
  96              	#NO_APP
  97 004c 2334F4FE 		sd	a5,-24(s0)
  98              		.loc 2 135 5 is_stmt 1
  99              		.loc 2 135 12 is_stmt 0
 100 0050 833784FE 		ld	a5,-24(s0)
 101              	.LVL0:
 102              	.LBE34:
 103              	.LBE33:
  24:src/riscv.cpp ****     if (!(scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)){
 104              		.loc 1 24 5 is_stmt 1
 105              		.loc 1 24 9 is_stmt 0
 106 0054 938787FF 		addi	a5,a5,-8
 107              	.LVL1:
 108              		.loc 1 24 5
 109 0058 13071000 		li	a4,1
 110 005c 6374F700 		bleu	a5,a4,.L5
  25:src/riscv.cpp ****         __asm__ volatile ("ld x10, 10 * 8(s0)"); //returning value of a0 if it dont contain return 
 111              		.loc 1 25 9 is_stmt 1
 112              		.loc 1 25 48 is_stmt 0
 113              	#APP
 114              	# 25 "src/riscv.cpp" 1
  26              	    }
 115              		ld x10, 10 * 8(s0)
 116              	# 0 "" 2
 117              	#NO_APP
 118              	.L5:
  27:src/riscv.cpp **** }
 119              		.loc 1 27 1
 120 0064 03348101 		ld	s0,24(sp)
 121              		.cfi_restore 8
 122              		.cfi_def_cfa 2, 32
 123 0068 13010102 		addi	sp,sp,32
 124              		.cfi_def_cfa_offset 0
 125 006c 67800000 		jr	ra
 126              		.cfi_endproc
 127              	.LFE46:
 129              		.section	.rodata.str1.8,"aMS",@progbits,1
GAS LISTING /tmp/ccYLWH9O.s 			page 6


 130              		.align	3
 131              	.LC0:
 132 0000 73636175 		.string	"scause: "
 132      73653A20 
 132      00
 133 0009 00000000 		.align	3
 133      000000
 134              	.LC1:
 135 0010 0A00     		.string	"\n"
 136 0012 00000000 		.align	3
 136      0000
 137              	.LC2:
 138 0018 73657063 		.string	"sepc: "
 138      3A2000
 139              		.text
 140              		.align	2
 141              		.globl	_ZN5Riscv20handleSupervisorTrapEv
 143              	_ZN5Riscv20handleSupervisorTrapEv:
 144              	.LFB47:
  28:src/riscv.cpp **** 
  29:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  30:src/riscv.cpp **** {
 145              		.loc 1 30 1 is_stmt 1
 146              		.cfi_startproc
 147 0070 130101F5 		addi	sp,sp,-176
 148              		.cfi_def_cfa_offset 176
 149 0074 2334110A 		sd	ra,168(sp)
 150 0078 2330810A 		sd	s0,160(sp)
 151              		.cfi_offset 1, -8
 152              		.cfi_offset 8, -16
 153 007c 1304010B 		addi	s0,sp,176
 154              		.cfi_def_cfa 8, 0
  31:src/riscv.cpp ****     // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  32:src/riscv.cpp **** 
  33:src/riscv.cpp ****     volatile uint64 scause = r_scause();
 155              		.loc 1 33 5
 156              	.LBB35:
 157              	.LBB36:
 133:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 158              		.loc 2 133 5
 134:src/../h/riscv.hpp ****     return scause;
 159              		.loc 2 134 5
 134:src/../h/riscv.hpp ****     return scause;
 160              		.loc 2 134 72 is_stmt 0
 161              	#APP
 162              	# 134 "src/../h/riscv.hpp" 1
 163              		csrr a5, scause
 164              	# 0 "" 2
 165              	#NO_APP
 166 0084 2330F4FA 		sd	a5,-96(s0)
 167              		.loc 2 135 5 is_stmt 1
 168              		.loc 2 135 12 is_stmt 0
 169 0088 833704FA 		ld	a5,-96(s0)
 170              	.LBE36:
 171              	.LBE35:
 172              		.loc 1 33 39
 173 008c 2334F4FE 		sd	a5,-24(s0)
GAS LISTING /tmp/ccYLWH9O.s 			page 7


  34:src/riscv.cpp ****     volatile uint64 a0 = r_a0();  //sys code
 174              		.loc 1 34 5 is_stmt 1
 175              	.LBB37:
 176              	.LBB38:
 136:src/../h/riscv.hpp **** }
 137:src/../h/riscv.hpp **** 
 138:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 139:src/../h/riscv.hpp **** {
 140:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 141:src/../h/riscv.hpp **** }
 142:src/../h/riscv.hpp **** 
 143:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 144:src/../h/riscv.hpp **** {
 145:src/../h/riscv.hpp ****     uint64 volatile sepc;
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 147:src/../h/riscv.hpp ****     return sepc;
 148:src/../h/riscv.hpp **** }
 149:src/../h/riscv.hpp **** 
 150:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 151:src/../h/riscv.hpp **** {
 152:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 153:src/../h/riscv.hpp **** }
 154:src/../h/riscv.hpp **** 
 155:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 156:src/../h/riscv.hpp **** {
 157:src/../h/riscv.hpp ****     uint64 volatile stvec;
 158:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 159:src/../h/riscv.hpp ****     return stvec;
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 165:src/../h/riscv.hpp **** }
 166:src/../h/riscv.hpp **** 
 167:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 168:src/../h/riscv.hpp **** {
 169:src/../h/riscv.hpp ****     uint64 volatile stval;
 170:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 171:src/../h/riscv.hpp ****     return stval;
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 187:src/../h/riscv.hpp **** }
 188:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccYLWH9O.s 			page 8


 189:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 190:src/../h/riscv.hpp **** {
 191:src/../h/riscv.hpp ****     uint64 volatile sip;
 192:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 193:src/../h/riscv.hpp ****     return sip;
 194:src/../h/riscv.hpp **** }
 195:src/../h/riscv.hpp **** 
 196:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 197:src/../h/riscv.hpp **** {
 198:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 199:src/../h/riscv.hpp **** }
 200:src/../h/riscv.hpp **** 
 201:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 202:src/../h/riscv.hpp **** {
 203:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 204:src/../h/riscv.hpp **** }
 205:src/../h/riscv.hpp **** 
 206:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 207:src/../h/riscv.hpp **** {
 208:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 209:src/../h/riscv.hpp **** }
 210:src/../h/riscv.hpp **** 
 211:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 212:src/../h/riscv.hpp **** {
 213:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 214:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 215:src/../h/riscv.hpp ****     return sstatus;
 216:src/../h/riscv.hpp **** }
 217:src/../h/riscv.hpp **** 
 218:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 219:src/../h/riscv.hpp **** {
 220:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 221:src/../h/riscv.hpp **** }
 222:src/../h/riscv.hpp **** // read register a0
 223:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0() {
 224:src/../h/riscv.hpp ****     uint64 volatile a0;
 177              		.loc 2 224 5
 225:src/../h/riscv.hpp ****     __asm__ volatile("mv %0, a0" : "=r" (a0));
 178              		.loc 2 225 5
 179              		.loc 2 225 46 is_stmt 0
 180              	#APP
 181              	# 225 "src/../h/riscv.hpp" 1
 226              	    return a0;
 182              		mv a5, a0
 183              	# 0 "" 2
 184              	#NO_APP
 185 0094 233CF4F8 		sd	a5,-104(s0)
 186              		.loc 2 226 5 is_stmt 1
 187              		.loc 2 226 12 is_stmt 0
 188 0098 833784F9 		ld	a5,-104(s0)
 189              	.LBE38:
 190              	.LBE37:
 191              		.loc 1 34 31
 192 009c 2330F4FE 		sd	a5,-32(s0)
  35:src/riscv.cpp ****     volatile uint64 a1 = r_a1();  //1. arg
 193              		.loc 1 35 5 is_stmt 1
 194              	.LBB39:
GAS LISTING /tmp/ccYLWH9O.s 			page 9


 195              	.LBB40:
 227:src/../h/riscv.hpp **** }
 228:src/../h/riscv.hpp **** // read register a1
 229:src/../h/riscv.hpp **** inline uint64 Riscv::r_a1() {
 230:src/../h/riscv.hpp ****     uint64 volatile a1;
 196              		.loc 2 230 5
 231:src/../h/riscv.hpp ****     __asm__ volatile("ld %0, 88(s0)" : "=r" (a1));
 197              		.loc 2 231 5
 198              		.loc 2 231 50 is_stmt 0
 199              	#APP
 200              	# 231 "src/../h/riscv.hpp" 1
 232              	    return a1;
 201              		ld a5, 88(s0)
 202              	# 0 "" 2
 203              	#NO_APP
 204 00a4 2338F4F8 		sd	a5,-112(s0)
 205              		.loc 2 232 5 is_stmt 1
 206              		.loc 2 232 12 is_stmt 0
 207 00a8 833704F9 		ld	a5,-112(s0)
 208              	.LBE40:
 209              	.LBE39:
 210              		.loc 1 35 31
 211 00ac 233CF4FC 		sd	a5,-40(s0)
  36:src/riscv.cpp ****     volatile uint64 a2 = r_a2();  //2. arg
 212              		.loc 1 36 5 is_stmt 1
 213              	.LBB41:
 214              	.LBB42:
 233:src/../h/riscv.hpp ****     /*uint64 volatile a0;
 234:src/../h/riscv.hpp ****     __asm__ volatile("mv %0, a1" : "=r" (a0));
 235:src/../h/riscv.hpp ****     return a0;*/
 236:src/../h/riscv.hpp **** }
 237:src/../h/riscv.hpp **** // read register a2
 238:src/../h/riscv.hpp **** inline uint64 Riscv::r_a2() {
 239:src/../h/riscv.hpp ****     uint64 volatile a2;
 215              		.loc 2 239 5
 240:src/../h/riscv.hpp ****     __asm__ volatile("ld %0, 96(s0)" : "=r" (a2));
 216              		.loc 2 240 5
 217              		.loc 2 240 50 is_stmt 0
 218              	#APP
 219              	# 240 "src/../h/riscv.hpp" 1
 241              	    return a2;
 220              		ld a5, 96(s0)
 221              	# 0 "" 2
 222              	#NO_APP
 223 00b4 2334F4F8 		sd	a5,-120(s0)
 224              		.loc 2 241 5 is_stmt 1
 225              		.loc 2 241 12 is_stmt 0
 226 00b8 833784F8 		ld	a5,-120(s0)
 227              	.LBE42:
 228              	.LBE41:
 229              		.loc 1 36 31
 230 00bc 2338F4FC 		sd	a5,-48(s0)
  37:src/riscv.cpp ****     volatile uint64 a3 = r_a3();  //3. arg
 231              		.loc 1 37 5 is_stmt 1
 232              	.LBB43:
 233              	.LBB44:
 242:src/../h/riscv.hpp ****     /*uint64 volatile a0;
GAS LISTING /tmp/ccYLWH9O.s 			page 10


 243:src/../h/riscv.hpp ****     __asm__ volatile("mv %0, a2" : "=r" (a0));
 244:src/../h/riscv.hpp ****     return a0;*/
 245:src/../h/riscv.hpp **** }
 246:src/../h/riscv.hpp **** // read register a3
 247:src/../h/riscv.hpp **** inline uint64 Riscv::r_a3() {
 248:src/../h/riscv.hpp ****     uint64 volatile a3;
 234              		.loc 2 248 5
 249:src/../h/riscv.hpp ****     __asm__ volatile("ld %0, 104(s0)" : "=r" (a3));
 235              		.loc 2 249 5
 236              		.loc 2 249 51 is_stmt 0
 237              	#APP
 238              	# 249 "src/../h/riscv.hpp" 1
 250              	    return a3;
 239              		ld a5, 104(s0)
 240              	# 0 "" 2
 241              	#NO_APP
 242 00c4 2330F4F8 		sd	a5,-128(s0)
 243              		.loc 2 250 5 is_stmt 1
 244              		.loc 2 250 12 is_stmt 0
 245 00c8 833704F8 		ld	a5,-128(s0)
 246              	.LBE44:
 247              	.LBE43:
 248              		.loc 1 37 31
 249 00cc 2334F4FC 		sd	a5,-56(s0)
  38:src/riscv.cpp ****     volatile uint64 a4 = r_a4();  //4. arg
 250              		.loc 1 38 5 is_stmt 1
 251              	.LBB45:
 252              	.LBB46:
 251:src/../h/riscv.hpp ****     /*uint64 volatile a0;
 252:src/../h/riscv.hpp ****     __asm__ volatile("mv %0, a3" : "=r" (a0));
 253:src/../h/riscv.hpp ****     return a0;*/
 254:src/../h/riscv.hpp **** }
 255:src/../h/riscv.hpp **** // read register a4
 256:src/../h/riscv.hpp **** inline uint64 Riscv::r_a4() {
 257:src/../h/riscv.hpp ****     uint64 volatile a4;
 253              		.loc 2 257 5
 258:src/../h/riscv.hpp ****     __asm__ volatile("ld %0, 112(s0)" : "=r" (a4));
 254              		.loc 2 258 5
 255              		.loc 2 258 51 is_stmt 0
 256              	#APP
 257              	# 258 "src/../h/riscv.hpp" 1
 259              	    return a4;
 258              		ld a5, 112(s0)
 259              	# 0 "" 2
 260              	#NO_APP
 261 00d4 233CF4F6 		sd	a5,-136(s0)
 262              		.loc 2 259 5 is_stmt 1
 263              		.loc 2 259 12 is_stmt 0
 264 00d8 833784F7 		ld	a5,-136(s0)
 265              	.LBE46:
 266              	.LBE45:
 267              		.loc 1 38 31
 268 00dc 2330F4FC 		sd	a5,-64(s0)
  39:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
 269              		.loc 1 39 5 is_stmt 1
 270              	.LBB47:
 271              		.loc 1 39 16 is_stmt 0
GAS LISTING /tmp/ccYLWH9O.s 			page 11


 272 00e0 033784FE 		ld	a4,-24(s0)
 273              		.loc 1 39 40
 274 00e4 93078000 		li	a5,8
 275 00e8 630EF70A 		beq	a4,a5,.L9
 276              		.loc 1 39 50 discriminator 2
 277 00ec 033784FE 		ld	a4,-24(s0)
 278              		.loc 1 39 40 discriminator 2
 279 00f0 93079000 		li	a5,9
 280 00f4 6308F70A 		beq	a4,a5,.L9
 281              	.LBE47:
  40:src/riscv.cpp ****     {
  41:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  42:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
  43:src/riscv.cpp **** 
  44:src/riscv.cpp ****         volatile bool dispatch = true;
  45:src/riscv.cpp ****         switch (a0) {
  46:src/riscv.cpp ****             case memAlloc:
  47:src/riscv.cpp ****                 ABI::memAllocWrapper(a1);
  48:src/riscv.cpp ****                 dispatch = false;
  49:src/riscv.cpp ****                 break;
  50:src/riscv.cpp ****             case memFree:
  51:src/riscv.cpp ****                 ABI::memFreeWrapper(a1);
  52:src/riscv.cpp ****                 dispatch = false;
  53:src/riscv.cpp ****                 break;
  54:src/riscv.cpp ****             case threadCreate:
  55:src/riscv.cpp ****                 ABI::threadCreateWrapper(a1, a2, a3, a4);
  56:src/riscv.cpp ****                 dispatch = false;
  57:src/riscv.cpp ****                 break;
  58:src/riscv.cpp ****             case threadExit:
  59:src/riscv.cpp ****                 ABI::threadExitWrapper();
  60:src/riscv.cpp ****                 dispatch = false;
  61:src/riscv.cpp ****                 break;
  62:src/riscv.cpp ****             case threadDispatch:
  63:src/riscv.cpp ****                 //__asm__ volatile ("ld x10, 10 * 8(s0)");
  64:src/riscv.cpp ****                 break;
  65:src/riscv.cpp ****             case semOpen:
  66:src/riscv.cpp ****                 ABI::semOpenWrapper(a1,a2);
  67:src/riscv.cpp ****                 dispatch = false;
  68:src/riscv.cpp ****                 break;
  69:src/riscv.cpp ****             case semClose:
  70:src/riscv.cpp ****                 ABI::semCloseWrapper(a1); dispatch = false;
  71:src/riscv.cpp ****                 break;
  72:src/riscv.cpp ****             case semWait:
  73:src/riscv.cpp ****                 ABI::semWaitWrapper(a1); dispatch = false;
  74:src/riscv.cpp ****                 break;
  75:src/riscv.cpp ****             case semSignal:
  76:src/riscv.cpp ****                 ABI::semSignalWrapper(a1); dispatch = false;
  77:src/riscv.cpp ****                 break;
  78:src/riscv.cpp ****             case semTrywait:
  79:src/riscv.cpp ****                 ABI::semTryWaitWrapper(a1); dispatch = false;
  80:src/riscv.cpp ****                 break;
  81:src/riscv.cpp ****             case putC:
  82:src/riscv.cpp ****                 __putc((char)a1);
  83:src/riscv.cpp ****                 //ABI::putcWrapper(a1);
  84:src/riscv.cpp ****                 dispatch = false;
  85:src/riscv.cpp ****                 break;
  86:src/riscv.cpp ****             case getC:
GAS LISTING /tmp/ccYLWH9O.s 			page 12


  87:src/riscv.cpp ****                 //dispatch = false;
  88:src/riscv.cpp ****                 __getc();
  89:src/riscv.cpp ****                 //ABI::getcWrapper();
  90:src/riscv.cpp ****                 break;
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****         }
  93:src/riscv.cpp **** 
  94:src/riscv.cpp **** 
  95:src/riscv.cpp ****         if(dispatch){
  96:src/riscv.cpp ****             //saving a0
  97:src/riscv.cpp ****             __asm__ volatile ("addi sp, sp, -16");
  98:src/riscv.cpp ****             __asm__ volatile ("sd x10, (sp)");
  99:src/riscv.cpp ****             TCB::dispatch();
 100:src/riscv.cpp ****             //returning a0
 101:src/riscv.cpp ****             __asm__ volatile ("ld x10, (sp)");
 102:src/riscv.cpp ****             __asm__ volatile ("addi sp, sp, 16");
 103:src/riscv.cpp ****         }else{
 104:src/riscv.cpp ****             __asm__ volatile("sd x10, 80(fp)");
 105:src/riscv.cpp ****         }
 106:src/riscv.cpp ****         w_sstatus(sstatus);
 107:src/riscv.cpp ****         w_sepc(sepc);
 108:src/riscv.cpp ****     }
 109:src/riscv.cpp ****     else if (scause == 0x8000000000000001UL)
 282              		.loc 1 109 10 is_stmt 1
 283              	.LBB68:
 284              	.LBB48:
 285              		.loc 1 109 21 is_stmt 0
 286 00f8 033784FE 		ld	a4,-24(s0)
 287              		.loc 1 109 10
 288 00fc 9307F0FF 		li	a5,-1
 289 0100 9397F703 		slli	a5,a5,63
 290 0104 93871700 		addi	a5,a5,1
 291 0108 630EF720 		beq	a4,a5,.L31
 292              	.LBE48:
 293              	.LBE68:
 110:src/riscv.cpp ****     {
 111:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 112:src/riscv.cpp ****         mc_sip(SIP_SSIP);  //saying that interrupt is processed
 113:src/riscv.cpp **** 
 114:src/riscv.cpp ****     }
 115:src/riscv.cpp ****     else if (scause == 0x8000000000000009UL)
 294              		.loc 1 115 10 is_stmt 1
 295              	.LBB69:
 296              	.LBB56:
 297              	.LBB49:
 298              		.loc 1 115 21 is_stmt 0
 299 010c 033784FE 		ld	a4,-24(s0)
 300              		.loc 1 115 10
 301 0110 9307F0FF 		li	a5,-1
 302 0114 9397F703 		slli	a5,a5,63
 303 0118 93879700 		addi	a5,a5,9
 304 011c 630AF720 		beq	a4,a5,.L32
 305              	.LBB50:
 116:src/riscv.cpp ****     {
 117:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard).
 118:src/riscv.cpp ****         console_handler();
 119:src/riscv.cpp ****     }
GAS LISTING /tmp/ccYLWH9O.s 			page 13


 120:src/riscv.cpp ****     else
 121:src/riscv.cpp ****     {
 122:src/riscv.cpp ****         // unexpected trap cause
 123:src/riscv.cpp ****         uint64 volatile sepc = r_sepc();
 306              		.loc 1 123 9 is_stmt 1
 307              	.LBB51:
 308              	.LBB52:
 145:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 309              		.loc 2 145 5
 146:src/../h/riscv.hpp ****     return sepc;
 310              		.loc 2 146 5
 146:src/../h/riscv.hpp ****     return sepc;
 311              		.loc 2 146 64 is_stmt 0
 312              	#APP
 313              	# 146 "src/../h/riscv.hpp" 1
 314              		csrr a5, sepc
 315              	# 0 "" 2
 316              	#NO_APP
 317 0124 233CF4FA 		sd	a5,-72(s0)
 147:src/../h/riscv.hpp **** }
 318              		.loc 2 147 5 is_stmt 1
 147:src/../h/riscv.hpp **** }
 319              		.loc 2 147 12 is_stmt 0
 320 0128 833784FB 		ld	a5,-72(s0)
 321              	.LBE52:
 322              	.LBE51:
 323              		.loc 1 123 39
 324 012c 2338F4F6 		sd	a5,-144(s0)
 124:src/riscv.cpp ****         printString("scause: ");
 325              		.loc 1 124 9 is_stmt 1
 326              		.loc 1 124 20 is_stmt 0
 327 0130 17050000 		lla	a0,.LC0
 327      13050500 
 328 0138 97000000 		call	_Z11printStringPKc@plt
 328      E7800000 
 329              	.LVL2:
 125:src/riscv.cpp ****         printInt(scause,2,0);
 330              		.loc 1 125 9 is_stmt 1
 331              		.loc 1 125 17 is_stmt 0
 332 0140 033584FE 		ld	a0,-24(s0)
 333 0144 13060000 		li	a2,0
 334 0148 93052000 		li	a1,2
 335 014c 1B050500 		sext.w	a0,a0
 336 0150 97000000 		call	_Z8printIntiii@plt
 336      E7800000 
 337              	.LVL3:
 126:src/riscv.cpp ****         printString("\n");
 338              		.loc 1 126 9 is_stmt 1
 339              		.loc 1 126 20 is_stmt 0
 340 0158 17050000 		lla	a0,.LC1
 340      13050500 
 341 0160 97000000 		call	_Z11printStringPKc@plt
 341      E7800000 
 342              	.LVL4:
 127:src/riscv.cpp **** 
 128:src/riscv.cpp ****         printString("sepc: ");
 343              		.loc 1 128 9 is_stmt 1
GAS LISTING /tmp/ccYLWH9O.s 			page 14


 344              		.loc 1 128 20 is_stmt 0
 345 0168 17050000 		lla	a0,.LC2
 345      13050500 
 346 0170 97000000 		call	_Z11printStringPKc@plt
 346      E7800000 
 347              	.LVL5:
 129:src/riscv.cpp ****         printInt(sepc,2,0);
 348              		.loc 1 129 9 is_stmt 1
 349              		.loc 1 129 17 is_stmt 0
 350 0178 033504F7 		ld	a0,-144(s0)
 351 017c 13060000 		li	a2,0
 352 0180 93052000 		li	a1,2
 353 0184 1B050500 		sext.w	a0,a0
 354 0188 97000000 		call	_Z8printIntiii@plt
 354      E7800000 
 355              	.LVL6:
 130:src/riscv.cpp ****         printString("\n");
 356              		.loc 1 130 9 is_stmt 1
 357              		.loc 1 130 20 is_stmt 0
 358 0190 17050000 		lla	a0,.LC1
 358      13050500 
 359 0198 97000000 		call	_Z11printStringPKc@plt
 359      E7800000 
 360              	.LVL7:
 361              	.LBE50:
 362              	.LBE49:
 363              	.LBE56:
 364              	.LBE69:
 131:src/riscv.cpp ****     }
 132:src/riscv.cpp **** }...
 365              		.loc 1 132 1
 366 01a0 6F008008 		j	.L8
 367              	.L9:
 368              	.LBB70:
 369              	.LBB57:
  41:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 370              		.loc 1 41 9 is_stmt 1
 371              	.LBB58:
 372              	.LBB59:
 145:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 373              		.loc 2 145 5
 146:src/../h/riscv.hpp ****     return sepc;
 374              		.loc 2 146 5
 146:src/../h/riscv.hpp ****     return sepc;
 375              		.loc 2 146 64 is_stmt 0
 376              	#APP
 377              	# 146 "src/../h/riscv.hpp" 1
 378              		csrr a5, sepc
 379              	# 0 "" 2
 380              	#NO_APP
 381 01a8 2338F4FA 		sd	a5,-80(s0)
 147:src/../h/riscv.hpp **** }
 382              		.loc 2 147 5 is_stmt 1
 147:src/../h/riscv.hpp **** }
 383              		.loc 2 147 12 is_stmt 0
 384 01ac 833704FB 		ld	a5,-80(s0)
 385              	.LBE59:
GAS LISTING /tmp/ccYLWH9O.s 			page 15


 386              	.LBE58:
  41:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 387              		.loc 1 41 41
 388 01b0 93874700 		addi	a5,a5,4
  41:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
 389              		.loc 1 41 43
 390 01b4 2330F4F6 		sd	a5,-160(s0)
  42:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 391              		.loc 1 42 9 is_stmt 1
 392              	.LBB60:
 393              	.LBB61:
 213:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 394              		.loc 2 213 5
 214:src/../h/riscv.hpp ****     return sstatus;
 395              		.loc 2 214 5
 214:src/../h/riscv.hpp ****     return sstatus;
 396              		.loc 2 214 76 is_stmt 0
 397              	#APP
 398              	# 214 "src/../h/riscv.hpp" 1
 399              		csrr a5, sstatus
 400              	# 0 "" 2
 401              	#NO_APP
 402 01bc 2334F4FA 		sd	a5,-88(s0)
 215:src/../h/riscv.hpp **** }
 403              		.loc 2 215 5 is_stmt 1
 215:src/../h/riscv.hpp **** }
 404              		.loc 2 215 12 is_stmt 0
 405 01c0 833784FA 		ld	a5,-88(s0)
 406              	.LBE61:
 407              	.LBE60:
  42:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 408              		.loc 1 42 45
 409 01c4 2334F4F6 		sd	a5,-152(s0)
  44:src/riscv.cpp ****         volatile bool dispatch = true;
 410              		.loc 1 44 9 is_stmt 1
  44:src/riscv.cpp ****         volatile bool dispatch = true;
 411              		.loc 1 44 23 is_stmt 0
 412 01c8 93071000 		li	a5,1
 413 01cc A30FF4F4 		sb	a5,-161(s0)
  45:src/riscv.cpp ****         switch (a0) {
 414              		.loc 1 45 9 is_stmt 1
  45:src/riscv.cpp ****         switch (a0) {
 415              		.loc 1 45 17 is_stmt 0
 416 01d0 833704FE 		ld	a5,-32(s0)
 417 01d4 13072004 		li	a4,66
 418 01d8 6368F702 		bgtu	a5,a4,.L12
 419 01dc 93972700 		slli	a5,a5,2
 420 01e0 17070000 		lla	a4,.L14
 420      13070700 
 421 01e8 B387E700 		add	a5,a5,a4
 422 01ec 83A70700 		lw	a5,0(a5)
 423 01f0 B387E700 		add	a5,a5,a4
 424 01f4 67800700 		jr	a5
 425              		.section	.rodata
 426              		.align	2
 427              		.align	2
 428              	.L14:
GAS LISTING /tmp/ccYLWH9O.s 			page 16


 429 0000 00000000 		.word	.L12-.L14
 430 0004 00000000 		.word	.L24-.L14
 431 0008 00000000 		.word	.L23-.L14
 432 000c 00000000 		.word	.L12-.L14
 433 0010 00000000 		.word	.L12-.L14
 434 0014 00000000 		.word	.L12-.L14
 435 0018 00000000 		.word	.L12-.L14
 436 001c 00000000 		.word	.L12-.L14
 437 0020 00000000 		.word	.L12-.L14
 438 0024 00000000 		.word	.L12-.L14
 439 0028 00000000 		.word	.L12-.L14
 440 002c 00000000 		.word	.L12-.L14
 441 0030 00000000 		.word	.L12-.L14
 442 0034 00000000 		.word	.L12-.L14
 443 0038 00000000 		.word	.L12-.L14
 444 003c 00000000 		.word	.L12-.L14
 445 0040 00000000 		.word	.L12-.L14
 446 0044 00000000 		.word	.L22-.L14
 447 0048 00000000 		.word	.L21-.L14
 448 004c 00000000 		.word	.L12-.L14
 449 0050 00000000 		.word	.L12-.L14
 450 0054 00000000 		.word	.L12-.L14
 451 0058 00000000 		.word	.L12-.L14
 452 005c 00000000 		.word	.L12-.L14
 453 0060 00000000 		.word	.L12-.L14
 454 0064 00000000 		.word	.L12-.L14
 455 0068 00000000 		.word	.L12-.L14
 456 006c 00000000 		.word	.L12-.L14
 457 0070 00000000 		.word	.L12-.L14
 458 0074 00000000 		.word	.L12-.L14
 459 0078 00000000 		.word	.L12-.L14
 460 007c 00000000 		.word	.L12-.L14
 461 0080 00000000 		.word	.L12-.L14
 462 0084 00000000 		.word	.L20-.L14
 463 0088 00000000 		.word	.L19-.L14
 464 008c 00000000 		.word	.L18-.L14
 465 0090 00000000 		.word	.L17-.L14
 466 0094 00000000 		.word	.L12-.L14
 467 0098 00000000 		.word	.L16-.L14
 468 009c 00000000 		.word	.L12-.L14
 469 00a0 00000000 		.word	.L12-.L14
 470 00a4 00000000 		.word	.L12-.L14
 471 00a8 00000000 		.word	.L12-.L14
 472 00ac 00000000 		.word	.L12-.L14
 473 00b0 00000000 		.word	.L12-.L14
 474 00b4 00000000 		.word	.L12-.L14
 475 00b8 00000000 		.word	.L12-.L14
 476 00bc 00000000 		.word	.L12-.L14
 477 00c0 00000000 		.word	.L12-.L14
 478 00c4 00000000 		.word	.L12-.L14
 479 00c8 00000000 		.word	.L12-.L14
 480 00cc 00000000 		.word	.L12-.L14
 481 00d0 00000000 		.word	.L12-.L14
 482 00d4 00000000 		.word	.L12-.L14
 483 00d8 00000000 		.word	.L12-.L14
 484 00dc 00000000 		.word	.L12-.L14
 485 00e0 00000000 		.word	.L12-.L14
GAS LISTING /tmp/ccYLWH9O.s 			page 17


 486 00e4 00000000 		.word	.L12-.L14
 487 00e8 00000000 		.word	.L12-.L14
 488 00ec 00000000 		.word	.L12-.L14
 489 00f0 00000000 		.word	.L12-.L14
 490 00f4 00000000 		.word	.L12-.L14
 491 00f8 00000000 		.word	.L12-.L14
 492 00fc 00000000 		.word	.L12-.L14
 493 0100 00000000 		.word	.L12-.L14
 494 0104 00000000 		.word	.L15-.L14
 495 0108 00000000 		.word	.L13-.L14
 496              		.text
 497              	.L24:
  46:src/riscv.cpp ****             case memAlloc:
 498              		.loc 1 46 13 is_stmt 1
  47:src/riscv.cpp ****                 ABI::memAllocWrapper(a1);
 499              		.loc 1 47 17
  47:src/riscv.cpp ****                 ABI::memAllocWrapper(a1);
 500              		.loc 1 47 37 is_stmt 0
 501 01f8 033584FD 		ld	a0,-40(s0)
 502 01fc 97000000 		call	_ZN3ABI15memAllocWrapperEm@plt
 502      E7800000 
 503              	.LVL8:
  48:src/riscv.cpp ****                 dispatch = false;
 504              		.loc 1 48 17 is_stmt 1
  48:src/riscv.cpp ****                 dispatch = false;
 505              		.loc 1 48 26 is_stmt 0
 506 0204 A30F04F4 		sb	zero,-161(s0)
  49:src/riscv.cpp ****                 break;
 507              		.loc 1 49 17 is_stmt 1
 508              	.L12:
  95:src/riscv.cpp ****         if(dispatch){
 509              		.loc 1 95 9
  95:src/riscv.cpp ****         if(dispatch){
 510              		.loc 1 95 12 is_stmt 0
 511 0208 8347F4F5 		lbu	a5,-161(s0)
 512 020c 93F7F70F 		andi	a5,a5,0xff
  95:src/riscv.cpp ****         if(dispatch){
 513              		.loc 1 95 9
 514 0210 639C070E 		bnez	a5,.L33
 104:src/riscv.cpp ****             __asm__ volatile("sd x10, 80(fp)");
 515              		.loc 1 104 13 is_stmt 1
 104:src/riscv.cpp ****             __asm__ volatile("sd x10, 80(fp)");
 516              		.loc 1 104 47 is_stmt 0
 517              	#APP
 518              	# 104 "src/riscv.cpp" 1
 519              		sd x10, 80(fp)
 520              	# 0 "" 2
 521              	#NO_APP
 522              	.L26:
 106:src/riscv.cpp ****         w_sstatus(sstatus);
 523              		.loc 1 106 9 is_stmt 1
 106:src/riscv.cpp ****         w_sstatus(sstatus);
 524              		.loc 1 106 18 is_stmt 0
 525 0218 833784F6 		ld	a5,-152(s0)
 526              	.LVL9:
 527              	.LBB62:
 528              	.LBB63:
GAS LISTING /tmp/ccYLWH9O.s 			page 18


 220:src/../h/riscv.hpp **** }
 529              		.loc 2 220 5 is_stmt 1
 220:src/../h/riscv.hpp **** }
 530              		.loc 2 220 77 is_stmt 0
 531              	#APP
 532              	# 220 "src/../h/riscv.hpp" 1
 533              		csrw sstatus, a5
 534              	# 0 "" 2
 535              	.LVL10:
 536              	#NO_APP
 537              	.LBE63:
 538              	.LBE62:
 107:src/riscv.cpp ****         w_sepc(sepc);
 539              		.loc 1 107 9 is_stmt 1
 107:src/riscv.cpp ****         w_sepc(sepc);
 540              		.loc 1 107 15 is_stmt 0
 541 0220 833704F6 		ld	a5,-160(s0)
 542              	.LVL11:
 543              	.LBB64:
 544              	.LBB65:
 152:src/../h/riscv.hpp **** }
 545              		.loc 2 152 5 is_stmt 1
 152:src/../h/riscv.hpp **** }
 546              		.loc 2 152 65 is_stmt 0
 547              	#APP
 548              	# 152 "src/../h/riscv.hpp" 1
 549              		csrw sepc, a5
 550              	# 0 "" 2
 551              	.LVL12:
 552              	#NO_APP
 553              	.L8:
 554              	.LBE65:
 555              	.LBE64:
 556              	.LBE57:
 557              	.LBE70:
 558              		.loc 1 132 1
 559 0228 8330810A 		ld	ra,168(sp)
 560              		.cfi_remember_state
 561              		.cfi_restore 1
 562 022c 0334010A 		ld	s0,160(sp)
 563              		.cfi_restore 8
 564              		.cfi_def_cfa 2, 176
 565 0230 1301010B 		addi	sp,sp,176
 566              		.cfi_def_cfa_offset 0
 567 0234 67800000 		jr	ra
 568              	.L23:
 569              		.cfi_restore_state
 570              	.LBB71:
 571              	.LBB66:
  50:src/riscv.cpp ****             case memFree:
 572              		.loc 1 50 13 is_stmt 1
  51:src/riscv.cpp ****                 ABI::memFreeWrapper(a1);
 573              		.loc 1 51 17
  51:src/riscv.cpp ****                 ABI::memFreeWrapper(a1);
 574              		.loc 1 51 36 is_stmt 0
 575 0238 033584FD 		ld	a0,-40(s0)
 576 023c 97000000 		call	_ZN3ABI14memFreeWrapperEm@plt
GAS LISTING /tmp/ccYLWH9O.s 			page 19


 576      E7800000 
 577              	.LVL13:
  52:src/riscv.cpp ****                 dispatch = false;
 578              		.loc 1 52 17 is_stmt 1
  52:src/riscv.cpp ****                 dispatch = false;
 579              		.loc 1 52 26 is_stmt 0
 580 0244 A30F04F4 		sb	zero,-161(s0)
  53:src/riscv.cpp ****                 break;
 581              		.loc 1 53 17 is_stmt 1
 582 0248 6FF01FFC 		j	.L12
 583              	.L22:
  54:src/riscv.cpp ****             case threadCreate:
 584              		.loc 1 54 13
  55:src/riscv.cpp ****                 ABI::threadCreateWrapper(a1, a2, a3, a4);
 585              		.loc 1 55 17
  55:src/riscv.cpp ****                 ABI::threadCreateWrapper(a1, a2, a3, a4);
 586              		.loc 1 55 41 is_stmt 0
 587 024c 033584FD 		ld	a0,-40(s0)
 588 0250 833504FD 		ld	a1,-48(s0)
 589 0254 033684FC 		ld	a2,-56(s0)
 590 0258 833604FC 		ld	a3,-64(s0)
 591 025c 97000000 		call	_ZN3ABI19threadCreateWrapperEmmmm@plt
 591      E7800000 
 592              	.LVL14:
  56:src/riscv.cpp ****                 dispatch = false;
 593              		.loc 1 56 17 is_stmt 1
  56:src/riscv.cpp ****                 dispatch = false;
 594              		.loc 1 56 26 is_stmt 0
 595 0264 A30F04F4 		sb	zero,-161(s0)
  57:src/riscv.cpp ****                 break;
 596              		.loc 1 57 17 is_stmt 1
 597 0268 6FF01FFA 		j	.L12
 598              	.L21:
  58:src/riscv.cpp ****             case threadExit:
 599              		.loc 1 58 13
  59:src/riscv.cpp ****                 ABI::threadExitWrapper();
 600              		.loc 1 59 17
  59:src/riscv.cpp ****                 ABI::threadExitWrapper();
 601              		.loc 1 59 39 is_stmt 0
 602 026c 97000000 		call	_ZN3ABI17threadExitWrapperEv@plt
 602      E7800000 
 603              	.LVL15:
  60:src/riscv.cpp ****                 dispatch = false;
 604              		.loc 1 60 17 is_stmt 1
  60:src/riscv.cpp ****                 dispatch = false;
 605              		.loc 1 60 26 is_stmt 0
 606 0274 A30F04F4 		sb	zero,-161(s0)
  61:src/riscv.cpp ****                 break;
 607              		.loc 1 61 17 is_stmt 1
 608 0278 6FF01FF9 		j	.L12
 609              	.L20:
  65:src/riscv.cpp ****             case semOpen:
 610              		.loc 1 65 13
  66:src/riscv.cpp ****                 ABI::semOpenWrapper(a1,a2);
 611              		.loc 1 66 17
  66:src/riscv.cpp ****                 ABI::semOpenWrapper(a1,a2);
 612              		.loc 1 66 36 is_stmt 0
GAS LISTING /tmp/ccYLWH9O.s 			page 20


 613 027c 033584FD 		ld	a0,-40(s0)
 614 0280 833504FD 		ld	a1,-48(s0)
 615 0284 97000000 		call	_ZN3ABI14semOpenWrapperEmm@plt
 615      E7800000 
 616              	.LVL16:
  67:src/riscv.cpp ****                 dispatch = false;
 617              		.loc 1 67 17 is_stmt 1
  67:src/riscv.cpp ****                 dispatch = false;
 618              		.loc 1 67 26 is_stmt 0
 619 028c A30F04F4 		sb	zero,-161(s0)
  68:src/riscv.cpp ****                 break;
 620              		.loc 1 68 17 is_stmt 1
 621 0290 6FF09FF7 		j	.L12
 622              	.L19:
  69:src/riscv.cpp ****             case semClose:
 623              		.loc 1 69 13
  70:src/riscv.cpp ****                 ABI::semCloseWrapper(a1); dispatch = false;
 624              		.loc 1 70 17
  70:src/riscv.cpp ****                 ABI::semCloseWrapper(a1); dispatch = false;
 625              		.loc 1 70 37 is_stmt 0
 626 0294 033584FD 		ld	a0,-40(s0)
 627 0298 97000000 		call	_ZN3ABI15semCloseWrapperEm@plt
 627      E7800000 
 628              	.LVL17:
  70:src/riscv.cpp ****                 ABI::semCloseWrapper(a1); dispatch = false;
 629              		.loc 1 70 43 is_stmt 1
  70:src/riscv.cpp ****                 ABI::semCloseWrapper(a1); dispatch = false;
 630              		.loc 1 70 52 is_stmt 0
 631 02a0 A30F04F4 		sb	zero,-161(s0)
  71:src/riscv.cpp ****                 break;
 632              		.loc 1 71 17 is_stmt 1
 633 02a4 6FF05FF6 		j	.L12
 634              	.L18:
  72:src/riscv.cpp ****             case semWait:
 635              		.loc 1 72 13
  73:src/riscv.cpp ****                 ABI::semWaitWrapper(a1); dispatch = false;
 636              		.loc 1 73 17
  73:src/riscv.cpp ****                 ABI::semWaitWrapper(a1); dispatch = false;
 637              		.loc 1 73 36 is_stmt 0
 638 02a8 033584FD 		ld	a0,-40(s0)
 639 02ac 97000000 		call	_ZN3ABI14semWaitWrapperEm@plt
 639      E7800000 
 640              	.LVL18:
  73:src/riscv.cpp ****                 ABI::semWaitWrapper(a1); dispatch = false;
 641              		.loc 1 73 42 is_stmt 1
  73:src/riscv.cpp ****                 ABI::semWaitWrapper(a1); dispatch = false;
 642              		.loc 1 73 51 is_stmt 0
 643 02b4 A30F04F4 		sb	zero,-161(s0)
  74:src/riscv.cpp ****                 break;
 644              		.loc 1 74 17 is_stmt 1
 645 02b8 6FF01FF5 		j	.L12
 646              	.L17:
  75:src/riscv.cpp ****             case semSignal:
 647              		.loc 1 75 13
  76:src/riscv.cpp ****                 ABI::semSignalWrapper(a1); dispatch = false;
 648              		.loc 1 76 17
  76:src/riscv.cpp ****                 ABI::semSignalWrapper(a1); dispatch = false;
GAS LISTING /tmp/ccYLWH9O.s 			page 21


 649              		.loc 1 76 38 is_stmt 0
 650 02bc 033584FD 		ld	a0,-40(s0)
 651 02c0 97000000 		call	_ZN3ABI16semSignalWrapperEm@plt
 651      E7800000 
 652              	.LVL19:
  76:src/riscv.cpp ****                 ABI::semSignalWrapper(a1); dispatch = false;
 653              		.loc 1 76 44 is_stmt 1
  76:src/riscv.cpp ****                 ABI::semSignalWrapper(a1); dispatch = false;
 654              		.loc 1 76 53 is_stmt 0
 655 02c8 A30F04F4 		sb	zero,-161(s0)
  77:src/riscv.cpp ****                 break;
 656              		.loc 1 77 17 is_stmt 1
 657 02cc 6FF0DFF3 		j	.L12
 658              	.L16:
  78:src/riscv.cpp ****             case semTrywait:
 659              		.loc 1 78 13
  79:src/riscv.cpp ****                 ABI::semTryWaitWrapper(a1); dispatch = false;
 660              		.loc 1 79 17
  79:src/riscv.cpp ****                 ABI::semTryWaitWrapper(a1); dispatch = false;
 661              		.loc 1 79 39 is_stmt 0
 662 02d0 033584FD 		ld	a0,-40(s0)
 663 02d4 97000000 		call	_ZN3ABI17semTryWaitWrapperEm@plt
 663      E7800000 
 664              	.LVL20:
  79:src/riscv.cpp ****                 ABI::semTryWaitWrapper(a1); dispatch = false;
 665              		.loc 1 79 45 is_stmt 1
  79:src/riscv.cpp ****                 ABI::semTryWaitWrapper(a1); dispatch = false;
 666              		.loc 1 79 54 is_stmt 0
 667 02dc A30F04F4 		sb	zero,-161(s0)
  80:src/riscv.cpp ****                 break;
 668              		.loc 1 80 17 is_stmt 1
 669 02e0 6FF09FF2 		j	.L12
 670              	.L13:
  81:src/riscv.cpp ****             case putC:
 671              		.loc 1 81 13
  82:src/riscv.cpp ****                 __putc((char)a1);
 672              		.loc 1 82 17
  82:src/riscv.cpp ****                 __putc((char)a1);
 673              		.loc 1 82 23 is_stmt 0
 674 02e4 033584FD 		ld	a0,-40(s0)
 675 02e8 1375F50F 		andi	a0,a0,0xff
 676 02ec 97000000 		call	__putc@plt
 676      E7800000 
 677              	.LVL21:
  84:src/riscv.cpp ****                 dispatch = false;
 678              		.loc 1 84 17 is_stmt 1
  84:src/riscv.cpp ****                 dispatch = false;
 679              		.loc 1 84 26 is_stmt 0
 680 02f4 A30F04F4 		sb	zero,-161(s0)
  85:src/riscv.cpp ****                 break;
 681              		.loc 1 85 17 is_stmt 1
 682 02f8 6FF01FF1 		j	.L12
 683              	.L15:
  86:src/riscv.cpp ****             case getC:
 684              		.loc 1 86 13
  88:src/riscv.cpp ****                 __getc();
 685              		.loc 1 88 17
GAS LISTING /tmp/ccYLWH9O.s 			page 22


  88:src/riscv.cpp ****                 __getc();
 686              		.loc 1 88 23 is_stmt 0
 687 02fc 97000000 		call	__getc@plt
 687      E7800000 
 688              	.LVL22:
  90:src/riscv.cpp ****                 break;
 689              		.loc 1 90 17 is_stmt 1
 690 0304 6FF05FF0 		j	.L12
 691              	.L33:
  97:src/riscv.cpp ****             __asm__ volatile ("addi sp, sp, -16");
 692              		.loc 1 97 13
  97:src/riscv.cpp ****             __asm__ volatile ("addi sp, sp, -16");
 693              		.loc 1 97 50 is_stmt 0
 694              	#APP
 695              	# 97 "src/riscv.cpp" 1
  98:src/riscv.cpp ****             __asm__ volatile ("sd x10, (sp)");
 696              		addi sp, sp, -16
 697              	# 0 "" 2
 698              		.loc 1 98 13 is_stmt 1
  98:src/riscv.cpp ****             __asm__ volatile ("sd x10, (sp)");
 699              		.loc 1 98 46 is_stmt 0
 700              	# 98 "src/riscv.cpp" 1
  99:src/riscv.cpp ****             TCB::dispatch();
 701              		sd x10, (sp)
 702              	# 0 "" 2
 703              		.loc 1 99 13 is_stmt 1
  99:src/riscv.cpp ****             TCB::dispatch();
 704              		.loc 1 99 26 is_stmt 0
 705              	#NO_APP
 706 0310 97000000 		call	_ZN3TCB8dispatchEv@plt
 706      E7800000 
 707              	.LVL23:
 101:src/riscv.cpp ****             __asm__ volatile ("ld x10, (sp)");
 708              		.loc 1 101 13 is_stmt 1
 101:src/riscv.cpp ****             __asm__ volatile ("ld x10, (sp)");
 709              		.loc 1 101 46 is_stmt 0
 710              	#APP
 711              	# 101 "src/riscv.cpp" 1
 102:src/riscv.cpp ****             __asm__ volatile ("addi sp, sp, 16");
 712              		ld x10, (sp)
 713              	# 0 "" 2
 714              		.loc 1 102 13 is_stmt 1
 102:src/riscv.cpp ****             __asm__ volatile ("addi sp, sp, 16");
 715              		.loc 1 102 49 is_stmt 0
 716              	# 102 "src/riscv.cpp" 1
 717              		addi sp, sp, 16
 718              	# 0 "" 2
 719              	#NO_APP
 720 0320 6FF09FEF 		j	.L26
 721              	.L31:
 722              	.LBE66:
 723              	.LBB67:
 112:src/riscv.cpp ****         mc_sip(SIP_SSIP);  //saying that interrupt is processed
 724              		.loc 1 112 9 is_stmt 1
 725              	.LVL24:
 726              	.LBB53:
 727              	.LBB54:
GAS LISTING /tmp/ccYLWH9O.s 			page 23


 186:src/../h/riscv.hpp **** }
 728              		.loc 2 186 5
 186:src/../h/riscv.hpp **** }
 729              		.loc 2 186 64 is_stmt 0
 730 0324 93072000 		li	a5,2
 731              	#APP
 732              	# 186 "src/../h/riscv.hpp" 1
 187:src/../h/riscv.hpp **** 
 733              		csrc sip, a5
 734              	# 0 "" 2
 735              		.loc 2 187 1
 736              	#NO_APP
 737 032c 6FF0DFEF 		j	.L8
 738              	.LVL25:
 739              	.L32:
 740              	.LBE54:
 741              	.LBE53:
 742              	.LBB55:
 118:src/riscv.cpp ****         console_handler();
 743              		.loc 1 118 9 is_stmt 1
 118:src/riscv.cpp ****         console_handler();
 744              		.loc 1 118 24 is_stmt 0
 745 0330 97000000 		call	console_handler@plt
 745      E7800000 
 746              	.LVL26:
 747 0338 6FF01FEF 		j	.L8
 748              	.LBE55:
 749              	.LBE67:
 750              	.LBE71:
 751              		.cfi_endproc
 752              	.LFE47:
 754              	.Letext0:
 755              		.file 3 "src/../h/../lib/hw.h"
 756              		.file 4 "src/../h/tcb.hpp"
 757              		.file 5 "src/../h/syscall_c.hpp"
 758              		.file 6 "src/../lib/console.h"
 759              		.file 7 "src/../h/../test/printing.hpp"
GAS LISTING /tmp/ccYLWH9O.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccYLWH9O.s:9      .text:0000000000000000 _ZN5Riscv13sysCallWraperEz
     /tmp/ccYLWH9O.s:13     .text:0000000000000000 .L0 
     /tmp/ccYLWH9O.s:14     .text:0000000000000000 .L0 
     /tmp/ccYLWH9O.s:15     .text:0000000000000004 .L0 
     /tmp/ccYLWH9O.s:17     .text:0000000000000008 .L0 
     /tmp/ccYLWH9O.s:19     .text:000000000000000c .L0 
     /tmp/ccYLWH9O.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:13     .text:000000000000000c .L0 
     /tmp/ccYLWH9O.s:28     .text:0000000000000010 .L0 
     /tmp/ccYLWH9O.s:29     .text:0000000000000014 .L0 
     /tmp/ccYLWH9O.s:30     .text:0000000000000014 .L0 
     /tmp/ccYLWH9O.s:32     .text:0000000000000018 .L0 
     /tmp/ccYLWH9O.s:34     .text:000000000000001c .L0 
     /tmp/ccYLWH9O.s:40     .text:000000000000001c _ZN5Riscv10popSppSpieEv
     /tmp/ccYLWH9O.s:43     .text:000000000000001c .L0 
     /tmp/ccYLWH9O.s:44     .text:000000000000001c .L0 
     /tmp/ccYLWH9O.s:45     .text:0000000000000020 .L0 
     /tmp/ccYLWH9O.s:47     .text:0000000000000024 .L0 
     /tmp/ccYLWH9O.s:49     .text:0000000000000028 .L0 
     /tmp/ccYLWH9O.s:51     .text:0000000000000028 .L0 
       src/riscv.cpp:18     .text:0000000000000028 .L0 
     /tmp/ccYLWH9O.s:57     .text:000000000000002c .L0 
       src/riscv.cpp:19     .text:000000000000002c .L0 
     /tmp/ccYLWH9O.s:63     .text:0000000000000030 .L0 
     /tmp/ccYLWH9O.s:64     .text:0000000000000034 .L0 
     /tmp/ccYLWH9O.s:65     .text:0000000000000034 .L0 
     /tmp/ccYLWH9O.s:67     .text:0000000000000038 .L0 
     /tmp/ccYLWH9O.s:69     .text:000000000000003c .L0 
     /tmp/ccYLWH9O.s:75     .text:000000000000003c _ZN5Riscv5popA0Ev
     /tmp/ccYLWH9O.s:78     .text:000000000000003c .L0 
     /tmp/ccYLWH9O.s:79     .text:000000000000003c .L0 
     /tmp/ccYLWH9O.s:80     .text:0000000000000040 .L0 
     /tmp/ccYLWH9O.s:82     .text:0000000000000044 .L0 
     /tmp/ccYLWH9O.s:84     .text:0000000000000048 .L0 
     /tmp/ccYLWH9O.s:89     .text:0000000000000048 .L0 
     /tmp/ccYLWH9O.s:90     .text:0000000000000048 .L0 
     /tmp/ccYLWH9O.s:91     .text:0000000000000048 .L0 
  src/../h/riscv.hpp:134    .text:0000000000000048 .L0 
     /tmp/ccYLWH9O.s:99     .text:0000000000000050 .L0 
     /tmp/ccYLWH9O.s:100    .text:0000000000000050 .L0 
     /tmp/ccYLWH9O.s:105    .text:0000000000000054 .L0 
     /tmp/ccYLWH9O.s:106    .text:0000000000000054 .L0 
     /tmp/ccYLWH9O.s:109    .text:0000000000000058 .L0 
     /tmp/ccYLWH9O.s:112    .text:0000000000000060 .L0 
       src/riscv.cpp:25     .text:0000000000000060 .L0 
     /tmp/ccYLWH9O.s:120    .text:0000000000000064 .L0 
     /tmp/ccYLWH9O.s:121    .text:0000000000000068 .L0 
     /tmp/ccYLWH9O.s:122    .text:0000000000000068 .L0 
     /tmp/ccYLWH9O.s:124    .text:000000000000006c .L0 
     /tmp/ccYLWH9O.s:126    .text:0000000000000070 .L0 
     /tmp/ccYLWH9O.s:143    .text:0000000000000070 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccYLWH9O.s:146    .text:0000000000000070 .L0 
     /tmp/ccYLWH9O.s:147    .text:0000000000000070 .L0 
     /tmp/ccYLWH9O.s:148    .text:0000000000000074 .L0 
     /tmp/ccYLWH9O.s:151    .text:000000000000007c .L0 
GAS LISTING /tmp/ccYLWH9O.s 			page 25


     /tmp/ccYLWH9O.s:152    .text:000000000000007c .L0 
     /tmp/ccYLWH9O.s:154    .text:0000000000000080 .L0 
     /tmp/ccYLWH9O.s:158    .text:0000000000000080 .L0 
     /tmp/ccYLWH9O.s:159    .text:0000000000000080 .L0 
     /tmp/ccYLWH9O.s:160    .text:0000000000000080 .L0 
  src/../h/riscv.hpp:134    .text:0000000000000080 .L0 
     /tmp/ccYLWH9O.s:168    .text:0000000000000088 .L0 
     /tmp/ccYLWH9O.s:169    .text:0000000000000088 .L0 
     /tmp/ccYLWH9O.s:173    .text:000000000000008c .L0 
     /tmp/ccYLWH9O.s:177    .text:0000000000000090 .L0 
     /tmp/ccYLWH9O.s:178    .text:0000000000000090 .L0 
     /tmp/ccYLWH9O.s:179    .text:0000000000000090 .L0 
  src/../h/riscv.hpp:225    .text:0000000000000090 .L0 
     /tmp/ccYLWH9O.s:187    .text:0000000000000098 .L0 
     /tmp/ccYLWH9O.s:188    .text:0000000000000098 .L0 
     /tmp/ccYLWH9O.s:192    .text:000000000000009c .L0 
     /tmp/ccYLWH9O.s:196    .text:00000000000000a0 .L0 
     /tmp/ccYLWH9O.s:197    .text:00000000000000a0 .L0 
     /tmp/ccYLWH9O.s:198    .text:00000000000000a0 .L0 
  src/../h/riscv.hpp:231    .text:00000000000000a0 .L0 
     /tmp/ccYLWH9O.s:206    .text:00000000000000a8 .L0 
     /tmp/ccYLWH9O.s:207    .text:00000000000000a8 .L0 
     /tmp/ccYLWH9O.s:211    .text:00000000000000ac .L0 
     /tmp/ccYLWH9O.s:215    .text:00000000000000b0 .L0 
     /tmp/ccYLWH9O.s:216    .text:00000000000000b0 .L0 
     /tmp/ccYLWH9O.s:217    .text:00000000000000b0 .L0 
  src/../h/riscv.hpp:240    .text:00000000000000b0 .L0 
     /tmp/ccYLWH9O.s:225    .text:00000000000000b8 .L0 
     /tmp/ccYLWH9O.s:226    .text:00000000000000b8 .L0 
     /tmp/ccYLWH9O.s:230    .text:00000000000000bc .L0 
     /tmp/ccYLWH9O.s:234    .text:00000000000000c0 .L0 
     /tmp/ccYLWH9O.s:235    .text:00000000000000c0 .L0 
     /tmp/ccYLWH9O.s:236    .text:00000000000000c0 .L0 
  src/../h/riscv.hpp:249    .text:00000000000000c0 .L0 
     /tmp/ccYLWH9O.s:244    .text:00000000000000c8 .L0 
     /tmp/ccYLWH9O.s:245    .text:00000000000000c8 .L0 
     /tmp/ccYLWH9O.s:249    .text:00000000000000cc .L0 
     /tmp/ccYLWH9O.s:253    .text:00000000000000d0 .L0 
     /tmp/ccYLWH9O.s:254    .text:00000000000000d0 .L0 
     /tmp/ccYLWH9O.s:255    .text:00000000000000d0 .L0 
  src/../h/riscv.hpp:258    .text:00000000000000d0 .L0 
     /tmp/ccYLWH9O.s:263    .text:00000000000000d8 .L0 
     /tmp/ccYLWH9O.s:264    .text:00000000000000d8 .L0 
     /tmp/ccYLWH9O.s:268    .text:00000000000000dc .L0 
     /tmp/ccYLWH9O.s:271    .text:00000000000000e0 .L0 
     /tmp/ccYLWH9O.s:272    .text:00000000000000e0 .L0 
     /tmp/ccYLWH9O.s:274    .text:00000000000000e4 .L0 
     /tmp/ccYLWH9O.s:277    .text:00000000000000ec .L0 
     /tmp/ccYLWH9O.s:279    .text:00000000000000f0 .L0 
     /tmp/ccYLWH9O.s:285    .text:00000000000000f8 .L0 
     /tmp/ccYLWH9O.s:286    .text:00000000000000f8 .L0 
     /tmp/ccYLWH9O.s:288    .text:00000000000000fc .L0 
     /tmp/ccYLWH9O.s:298    .text:000000000000010c .L0 
     /tmp/ccYLWH9O.s:299    .text:000000000000010c .L0 
     /tmp/ccYLWH9O.s:301    .text:0000000000000110 .L0 
     /tmp/ccYLWH9O.s:309    .text:0000000000000120 .L0 
     /tmp/ccYLWH9O.s:310    .text:0000000000000120 .L0 
GAS LISTING /tmp/ccYLWH9O.s 			page 26


     /tmp/ccYLWH9O.s:311    .text:0000000000000120 .L0 
  src/../h/riscv.hpp:146    .text:0000000000000120 .L0 
     /tmp/ccYLWH9O.s:319    .text:0000000000000128 .L0 
     /tmp/ccYLWH9O.s:320    .text:0000000000000128 .L0 
     /tmp/ccYLWH9O.s:324    .text:000000000000012c .L0 
     /tmp/ccYLWH9O.s:326    .text:0000000000000130 .L0 
     /tmp/ccYLWH9O.s:327    .text:0000000000000130 .L0 
     /tmp/ccYLWH9O.s:331    .text:0000000000000140 .L0 
     /tmp/ccYLWH9O.s:332    .text:0000000000000140 .L0 
     /tmp/ccYLWH9O.s:339    .text:0000000000000158 .L0 
     /tmp/ccYLWH9O.s:340    .text:0000000000000158 .L0 
     /tmp/ccYLWH9O.s:344    .text:0000000000000168 .L0 
     /tmp/ccYLWH9O.s:345    .text:0000000000000168 .L0 
     /tmp/ccYLWH9O.s:349    .text:0000000000000178 .L0 
     /tmp/ccYLWH9O.s:350    .text:0000000000000178 .L0 
     /tmp/ccYLWH9O.s:357    .text:0000000000000190 .L0 
     /tmp/ccYLWH9O.s:358    .text:0000000000000190 .L0 
     /tmp/ccYLWH9O.s:366    .text:00000000000001a0 .L0 
     /tmp/ccYLWH9O.s:373    .text:00000000000001a4 .L0 
     /tmp/ccYLWH9O.s:374    .text:00000000000001a4 .L0 
     /tmp/ccYLWH9O.s:375    .text:00000000000001a4 .L0 
  src/../h/riscv.hpp:146    .text:00000000000001a4 .L0 
     /tmp/ccYLWH9O.s:383    .text:00000000000001ac .L0 
     /tmp/ccYLWH9O.s:384    .text:00000000000001ac .L0 
     /tmp/ccYLWH9O.s:388    .text:00000000000001b0 .L0 
     /tmp/ccYLWH9O.s:390    .text:00000000000001b4 .L0 
     /tmp/ccYLWH9O.s:394    .text:00000000000001b8 .L0 
     /tmp/ccYLWH9O.s:395    .text:00000000000001b8 .L0 
     /tmp/ccYLWH9O.s:396    .text:00000000000001b8 .L0 
  src/../h/riscv.hpp:214    .text:00000000000001b8 .L0 
     /tmp/ccYLWH9O.s:404    .text:00000000000001c0 .L0 
     /tmp/ccYLWH9O.s:405    .text:00000000000001c0 .L0 
     /tmp/ccYLWH9O.s:409    .text:00000000000001c4 .L0 
     /tmp/ccYLWH9O.s:411    .text:00000000000001c8 .L0 
     /tmp/ccYLWH9O.s:412    .text:00000000000001c8 .L0 
     /tmp/ccYLWH9O.s:415    .text:00000000000001d0 .L0 
     /tmp/ccYLWH9O.s:416    .text:00000000000001d0 .L0 
     /tmp/ccYLWH9O.s:499    .text:00000000000001f8 .L0 
     /tmp/ccYLWH9O.s:500    .text:00000000000001f8 .L0 
     /tmp/ccYLWH9O.s:501    .text:00000000000001f8 .L0 
     /tmp/ccYLWH9O.s:505    .text:0000000000000204 .L0 
     /tmp/ccYLWH9O.s:506    .text:0000000000000204 .L0 
     /tmp/ccYLWH9O.s:509    .text:0000000000000208 .L0 
     /tmp/ccYLWH9O.s:510    .text:0000000000000208 .L0 
     /tmp/ccYLWH9O.s:511    .text:0000000000000208 .L0 
     /tmp/ccYLWH9O.s:514    .text:0000000000000210 .L0 
     /tmp/ccYLWH9O.s:516    .text:0000000000000214 .L0 
       src/riscv.cpp:104    .text:0000000000000214 .L0 
     /tmp/ccYLWH9O.s:524    .text:0000000000000218 .L0 
     /tmp/ccYLWH9O.s:525    .text:0000000000000218 .L0 
     /tmp/ccYLWH9O.s:530    .text:000000000000021c .L0 
  src/../h/riscv.hpp:220    .text:000000000000021c .L0 
     /tmp/ccYLWH9O.s:540    .text:0000000000000220 .L0 
     /tmp/ccYLWH9O.s:541    .text:0000000000000220 .L0 
     /tmp/ccYLWH9O.s:546    .text:0000000000000224 .L0 
  src/../h/riscv.hpp:152    .text:0000000000000224 .L0 
     /tmp/ccYLWH9O.s:559    .text:0000000000000228 .L0 
GAS LISTING /tmp/ccYLWH9O.s 			page 27


     /tmp/ccYLWH9O.s:560    .text:000000000000022c .L0 
     /tmp/ccYLWH9O.s:561    .text:000000000000022c .L0 
     /tmp/ccYLWH9O.s:563    .text:0000000000000230 .L0 
     /tmp/ccYLWH9O.s:564    .text:0000000000000230 .L0 
     /tmp/ccYLWH9O.s:566    .text:0000000000000234 .L0 
     /tmp/ccYLWH9O.s:569    .text:0000000000000238 .L0 
     /tmp/ccYLWH9O.s:573    .text:0000000000000238 .L0 
     /tmp/ccYLWH9O.s:574    .text:0000000000000238 .L0 
     /tmp/ccYLWH9O.s:575    .text:0000000000000238 .L0 
     /tmp/ccYLWH9O.s:579    .text:0000000000000244 .L0 
     /tmp/ccYLWH9O.s:580    .text:0000000000000244 .L0 
     /tmp/ccYLWH9O.s:582    .text:0000000000000248 .L0 
     /tmp/ccYLWH9O.s:585    .text:000000000000024c .L0 
     /tmp/ccYLWH9O.s:586    .text:000000000000024c .L0 
     /tmp/ccYLWH9O.s:587    .text:000000000000024c .L0 
     /tmp/ccYLWH9O.s:594    .text:0000000000000264 .L0 
     /tmp/ccYLWH9O.s:595    .text:0000000000000264 .L0 
     /tmp/ccYLWH9O.s:597    .text:0000000000000268 .L0 
     /tmp/ccYLWH9O.s:600    .text:000000000000026c .L0 
     /tmp/ccYLWH9O.s:601    .text:000000000000026c .L0 
     /tmp/ccYLWH9O.s:602    .text:000000000000026c .L0 
     /tmp/ccYLWH9O.s:605    .text:0000000000000274 .L0 
     /tmp/ccYLWH9O.s:606    .text:0000000000000274 .L0 
     /tmp/ccYLWH9O.s:608    .text:0000000000000278 .L0 
     /tmp/ccYLWH9O.s:611    .text:000000000000027c .L0 
     /tmp/ccYLWH9O.s:612    .text:000000000000027c .L0 
     /tmp/ccYLWH9O.s:613    .text:000000000000027c .L0 
     /tmp/ccYLWH9O.s:618    .text:000000000000028c .L0 
     /tmp/ccYLWH9O.s:619    .text:000000000000028c .L0 
     /tmp/ccYLWH9O.s:621    .text:0000000000000290 .L0 
     /tmp/ccYLWH9O.s:624    .text:0000000000000294 .L0 
     /tmp/ccYLWH9O.s:625    .text:0000000000000294 .L0 
     /tmp/ccYLWH9O.s:626    .text:0000000000000294 .L0 
     /tmp/ccYLWH9O.s:630    .text:00000000000002a0 .L0 
     /tmp/ccYLWH9O.s:631    .text:00000000000002a0 .L0 
     /tmp/ccYLWH9O.s:633    .text:00000000000002a4 .L0 
     /tmp/ccYLWH9O.s:636    .text:00000000000002a8 .L0 
     /tmp/ccYLWH9O.s:637    .text:00000000000002a8 .L0 
     /tmp/ccYLWH9O.s:638    .text:00000000000002a8 .L0 
     /tmp/ccYLWH9O.s:642    .text:00000000000002b4 .L0 
     /tmp/ccYLWH9O.s:643    .text:00000000000002b4 .L0 
     /tmp/ccYLWH9O.s:645    .text:00000000000002b8 .L0 
     /tmp/ccYLWH9O.s:648    .text:00000000000002bc .L0 
     /tmp/ccYLWH9O.s:649    .text:00000000000002bc .L0 
     /tmp/ccYLWH9O.s:650    .text:00000000000002bc .L0 
     /tmp/ccYLWH9O.s:654    .text:00000000000002c8 .L0 
     /tmp/ccYLWH9O.s:655    .text:00000000000002c8 .L0 
     /tmp/ccYLWH9O.s:657    .text:00000000000002cc .L0 
     /tmp/ccYLWH9O.s:660    .text:00000000000002d0 .L0 
     /tmp/ccYLWH9O.s:661    .text:00000000000002d0 .L0 
     /tmp/ccYLWH9O.s:662    .text:00000000000002d0 .L0 
     /tmp/ccYLWH9O.s:666    .text:00000000000002dc .L0 
     /tmp/ccYLWH9O.s:667    .text:00000000000002dc .L0 
     /tmp/ccYLWH9O.s:669    .text:00000000000002e0 .L0 
     /tmp/ccYLWH9O.s:672    .text:00000000000002e4 .L0 
     /tmp/ccYLWH9O.s:673    .text:00000000000002e4 .L0 
     /tmp/ccYLWH9O.s:674    .text:00000000000002e4 .L0 
GAS LISTING /tmp/ccYLWH9O.s 			page 28


     /tmp/ccYLWH9O.s:679    .text:00000000000002f4 .L0 
     /tmp/ccYLWH9O.s:680    .text:00000000000002f4 .L0 
     /tmp/ccYLWH9O.s:682    .text:00000000000002f8 .L0 
     /tmp/ccYLWH9O.s:685    .text:00000000000002fc .L0 
     /tmp/ccYLWH9O.s:686    .text:00000000000002fc .L0 
     /tmp/ccYLWH9O.s:687    .text:00000000000002fc .L0 
     /tmp/ccYLWH9O.s:690    .text:0000000000000304 .L0 
     /tmp/ccYLWH9O.s:693    .text:0000000000000308 .L0 
       src/riscv.cpp:97     .text:0000000000000308 .L0 
     /tmp/ccYLWH9O.s:699    .text:000000000000030c .L0 
       src/riscv.cpp:98     .text:000000000000030c .L0 
     /tmp/ccYLWH9O.s:704    .text:0000000000000310 .L0 
     /tmp/ccYLWH9O.s:706    .text:0000000000000310 .L0 
     /tmp/ccYLWH9O.s:709    .text:0000000000000318 .L0 
       src/riscv.cpp:101    .text:0000000000000318 .L0 
     /tmp/ccYLWH9O.s:715    .text:000000000000031c .L0 
       src/riscv.cpp:102    .text:000000000000031c .L0 
     /tmp/ccYLWH9O.s:728    .text:0000000000000324 .L0 
     /tmp/ccYLWH9O.s:729    .text:0000000000000324 .L0 
     /tmp/ccYLWH9O.s:730    .text:0000000000000324 .L0 
     /tmp/ccYLWH9O.s:737    .text:000000000000032c .L0 
     /tmp/ccYLWH9O.s:744    .text:0000000000000330 .L0 
     /tmp/ccYLWH9O.s:745    .text:0000000000000330 .L0 
     /tmp/ccYLWH9O.s:751    .text:000000000000033c .L0 
     /tmp/ccYLWH9O.s:760    .text:000000000000033c .L0 
     /tmp/ccYLWH9O.s:131    .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccYLWH9O.s:327    .text:0000000000000130 .L0 
     /tmp/ccYLWH9O.s:134    .rodata.str1.8:0000000000000010 .LC1
     /tmp/ccYLWH9O.s:340    .text:0000000000000158 .L0 
     /tmp/ccYLWH9O.s:137    .rodata.str1.8:0000000000000018 .LC2
     /tmp/ccYLWH9O.s:345    .text:0000000000000168 .L0 
     /tmp/ccYLWH9O.s:358    .text:0000000000000190 .L0 
     /tmp/ccYLWH9O.s:428    .rodata:0000000000000000 .L14
     /tmp/ccYLWH9O.s:420    .text:00000000000001e0 .L0 
     /tmp/ccYLWH9O.s:118    .text:0000000000000064 .L5
     /tmp/ccYLWH9O.s:367    .text:00000000000001a4 .L9
     /tmp/ccYLWH9O.s:721    .text:0000000000000324 .L31
     /tmp/ccYLWH9O.s:739    .text:0000000000000330 .L32
     /tmp/ccYLWH9O.s:553    .text:0000000000000228 .L8
     /tmp/ccYLWH9O.s:508    .text:0000000000000208 .L12
     /tmp/ccYLWH9O.s:691    .text:0000000000000308 .L33
     /tmp/ccYLWH9O.s:522    .text:0000000000000218 .L26
     /tmp/ccYLWH9O.s:497    .text:00000000000001f8 .L24
     /tmp/ccYLWH9O.s:568    .text:0000000000000238 .L23
     /tmp/ccYLWH9O.s:583    .text:000000000000024c .L22
     /tmp/ccYLWH9O.s:598    .text:000000000000026c .L21
     /tmp/ccYLWH9O.s:609    .text:000000000000027c .L20
     /tmp/ccYLWH9O.s:622    .text:0000000000000294 .L19
     /tmp/ccYLWH9O.s:634    .text:00000000000002a8 .L18
     /tmp/ccYLWH9O.s:646    .text:00000000000002bc .L17
     /tmp/ccYLWH9O.s:658    .text:00000000000002d0 .L16
     /tmp/ccYLWH9O.s:683    .text:00000000000002fc .L15
     /tmp/ccYLWH9O.s:670    .text:00000000000002e4 .L13
     /tmp/ccYLWH9O.s:2225   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccYLWH9O.s:3473   .debug_str:00000000000006d3 .LASF146
     /tmp/ccYLWH9O.s:3521   .debug_str:00000000000008ac .LASF147
     /tmp/ccYLWH9O.s:3397   .debug_str:00000000000004db .LASF148
GAS LISTING /tmp/ccYLWH9O.s 			page 29


     /tmp/ccYLWH9O.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccYLWH9O.s:754    .text:000000000000033c .Letext0
     /tmp/ccYLWH9O.s:3229   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccYLWH9O.s:3325   .debug_str:00000000000002cf .LASF0
     /tmp/ccYLWH9O.s:3345   .debug_str:0000000000000377 .LASF1
     /tmp/ccYLWH9O.s:3417   .debug_str:0000000000000564 .LASF2
     /tmp/ccYLWH9O.s:3425   .debug_str:00000000000005a1 .LASF4
     /tmp/ccYLWH9O.s:3333   .debug_str:0000000000000303 .LASF3
     /tmp/ccYLWH9O.s:3239   .debug_str:0000000000000043 .LASF5
     /tmp/ccYLWH9O.s:3389   .debug_str:00000000000004a2 .LASF6
     /tmp/ccYLWH9O.s:3341   .debug_str:0000000000000351 .LASF7
     /tmp/ccYLWH9O.s:3299   .debug_str:0000000000000205 .LASF8
     /tmp/ccYLWH9O.s:3309   .debug_str:0000000000000252 .LASF9
     /tmp/ccYLWH9O.s:3255   .debug_str:00000000000000b4 .LASF10
     /tmp/ccYLWH9O.s:3293   .debug_str:00000000000001e2 .LASF11
     /tmp/ccYLWH9O.s:3265   .debug_str:000000000000010b .LASF12
     /tmp/ccYLWH9O.s:3253   .debug_str:00000000000000a4 .LASF13
     /tmp/ccYLWH9O.s:3457   .debug_str:0000000000000662 .LASF14
     /tmp/ccYLWH9O.s:3281   .debug_str:0000000000000164 .LASF15
     /tmp/ccYLWH9O.s:3447   .debug_str:000000000000062b .LASF16
     /tmp/ccYLWH9O.s:3503   .debug_str:0000000000000869 .LASF90
     /tmp/ccYLWH9O.s:3405   .debug_str:0000000000000527 .LASF20
     /tmp/ccYLWH9O.s:3351   .debug_str:0000000000000398 .LASF17
     /tmp/ccYLWH9O.s:3285   .debug_str:0000000000000195 .LASF18
     /tmp/ccYLWH9O.s:3525   .debug_str:00000000000008c5 .LASF19
     /tmp/ccYLWH9O.s:3451   .debug_str:0000000000000648 .LASF21
     /tmp/ccYLWH9O.s:3409   .debug_str:0000000000000537 .LASF22
     /tmp/ccYLWH9O.s:3349   .debug_str:0000000000000390 .LASF23
     /tmp/ccYLWH9O.s:3437   .debug_str:00000000000005e6 .LASF24
     /tmp/ccYLWH9O.s:3471   .debug_str:00000000000006c8 .LASF25
     /tmp/ccYLWH9O.s:3261   .debug_str:00000000000000e9 .LASF26
     /tmp/ccYLWH9O.s:3273   .debug_str:0000000000000140 .LASF27
     /tmp/ccYLWH9O.s:3337   .debug_str:0000000000000326 .LASF28
     /tmp/ccYLWH9O.s:3387   .debug_str:000000000000049a .LASF29
     /tmp/ccYLWH9O.s:3245   .debug_str:0000000000000066 .LASF30
     /tmp/ccYLWH9O.s:3523   .debug_str:00000000000008ba .LASF31
     /tmp/ccYLWH9O.s:3279   .debug_str:0000000000000157 .LASF32
     /tmp/ccYLWH9O.s:3311   .debug_str:0000000000000260 .LASF33
     /tmp/ccYLWH9O.s:3303   .debug_str:0000000000000225 .LASF34
     /tmp/ccYLWH9O.s:3269   .debug_str:0000000000000129 .LASF35
     /tmp/ccYLWH9O.s:3237   .debug_str:000000000000003d .LASF36
     /tmp/ccYLWH9O.s:3489   .debug_str:00000000000007f4 .LASF38
     /tmp/ccYLWH9O.s:3317   .debug_str:0000000000000293 .LASF37
     /tmp/ccYLWH9O.s:3323   .debug_str:00000000000002b7 .LASF39
     /tmp/ccYLWH9O.s:3493   .debug_str:000000000000081e .LASF40
     /tmp/ccYLWH9O.s:3487   .debug_str:00000000000007df .LASF42
     /tmp/ccYLWH9O.s:3413   .debug_str:0000000000000550 .LASF44
     /tmp/ccYLWH9O.s:3379   .debug_str:000000000000046a .LASF46
     /tmp/ccYLWH9O.s:3399   .debug_str:00000000000004f9 .LASF41
     /tmp/ccYLWH9O.s:3401   .debug_str:0000000000000500 .LASF43
     /tmp/ccYLWH9O.s:3375   .debug_str:000000000000044f .LASF45
     /tmp/ccYLWH9O.s:3343   .debug_str:0000000000000364 .LASF47
     /tmp/ccYLWH9O.s:3519   .debug_str:00000000000008a4 .LASF48
     /tmp/ccYLWH9O.s:3477   .debug_str:000000000000079c .LASF49
     /tmp/ccYLWH9O.s:3373   .debug_str:0000000000000447 .LASF50
     /tmp/ccYLWH9O.s:3377   .debug_str:0000000000000456 .LASF51
     /tmp/ccYLWH9O.s:3355   .debug_str:00000000000003ba .LASF52
GAS LISTING /tmp/ccYLWH9O.s 			page 30


     /tmp/ccYLWH9O.s:3403   .debug_str:0000000000000513 .LASF53
     /tmp/ccYLWH9O.s:3539   .debug_str:0000000000000926 .LASF54
     /tmp/ccYLWH9O.s:3331   .debug_str:00000000000002ef .LASF55
     /tmp/ccYLWH9O.s:3453   .debug_str:000000000000064e .LASF56
     /tmp/ccYLWH9O.s:3429   .debug_str:00000000000005ad .LASF57
     /tmp/ccYLWH9O.s:3431   .debug_str:00000000000005c0 .LASF58
     /tmp/ccYLWH9O.s:3257   .debug_str:00000000000000c3 .LASF59
     /tmp/ccYLWH9O.s:3277   .debug_str:0000000000000151 .LASF60
     /tmp/ccYLWH9O.s:3321   .debug_str:00000000000002a5 .LASF61
     /tmp/ccYLWH9O.s:3329   .debug_str:00000000000002e9 .LASF62
     /tmp/ccYLWH9O.s:3271   .debug_str:000000000000012e .LASF63
     /tmp/ccYLWH9O.s:3241   .debug_str:000000000000004a .LASF64
     /tmp/ccYLWH9O.s:3423   .debug_str:0000000000000589 .LASF65
     /tmp/ccYLWH9O.s:3415   .debug_str:0000000000000559 .LASF66
     /tmp/ccYLWH9O.s:3535   .debug_str:0000000000000901 .LASF67
     /tmp/ccYLWH9O.s:3505   .debug_str:000000000000086f .LASF68
     /tmp/ccYLWH9O.s:3529   .debug_str:00000000000008d9 .LASF69
     /tmp/ccYLWH9O.s:3501   .debug_str:000000000000085f .LASF70
     /tmp/ccYLWH9O.s:3369   .debug_str:000000000000041a .LASF71
     /tmp/ccYLWH9O.s:3517   .debug_str:0000000000000895 .LASF72
     /tmp/ccYLWH9O.s:3307   .debug_str:0000000000000236 .LASF73
     /tmp/ccYLWH9O.s:3433   .debug_str:00000000000005c7 .LASF74
     /tmp/ccYLWH9O.s:3283   .debug_str:000000000000017a .LASF75
     /tmp/ccYLWH9O.s:3327   .debug_str:00000000000002dc .LASF76
     /tmp/ccYLWH9O.s:3497   .debug_str:0000000000000840 .LASF77
     /tmp/ccYLWH9O.s:3509   .debug_str:0000000000000881 .LASF78
     /tmp/ccYLWH9O.s:3385   .debug_str:0000000000000489 .LASF79
     /tmp/ccYLWH9O.s:3511   .debug_str:0000000000000886 .LASF80
     /tmp/ccYLWH9O.s:3335   .debug_str:0000000000000315 .LASF81
     /tmp/ccYLWH9O.s:3513   .debug_str:000000000000088b .LASF82
     /tmp/ccYLWH9O.s:3249   .debug_str:000000000000007e .LASF83
     /tmp/ccYLWH9O.s:3515   .debug_str:0000000000000890 .LASF84
     /tmp/ccYLWH9O.s:3541   .debug_str:000000000000092e .LASF85
     /tmp/ccYLWH9O.s:3381   .debug_str:000000000000047f .LASF86
     /tmp/ccYLWH9O.s:3481   .debug_str:00000000000007ba .LASF87
     /tmp/ccYLWH9O.s:3443   .debug_str:000000000000060a .LASF88
     /tmp/ccYLWH9O.s:3357   .debug_str:00000000000003c2 .LASF89
     /tmp/ccYLWH9O.s:3393   .debug_str:00000000000004be .LASF129
     /tmp/ccYLWH9O.s:3339   .debug_str:000000000000032f .LASF131
     /tmp/ccYLWH9O.s:3461   .debug_str:0000000000000677 .LASF149
     /tmp/ccYLWH9O.s:3427   .debug_str:00000000000005a8 .LASF91
     /tmp/ccYLWH9O.s:3483   .debug_str:00000000000007cb .LASF93
     /tmp/ccYLWH9O.s:3463   .debug_str:000000000000067f .LASF95
     /tmp/ccYLWH9O.s:3371   .debug_str:0000000000000430 .LASF97
     /tmp/ccYLWH9O.s:3469   .debug_str:00000000000006bc .LASF92
     /tmp/ccYLWH9O.s:3287   .debug_str:000000000000019e .LASF94
     /tmp/ccYLWH9O.s:3421   .debug_str:000000000000057f .LASF96
     /tmp/ccYLWH9O.s:3251   .debug_str:000000000000008f .LASF98
     /tmp/ccYLWH9O.s:3467   .debug_str:00000000000006b1 .LASF99
     /tmp/ccYLWH9O.s:3289   .debug_str:00000000000001b5 .LASF100
     /tmp/ccYLWH9O.s:3313   .debug_str:000000000000026a .LASF101
     /tmp/ccYLWH9O.s:3243   .debug_str:0000000000000055 .LASF102
     /tmp/ccYLWH9O.s:3363   .debug_str:00000000000003f1 .LASF103
     /tmp/ccYLWH9O.s:3495   .debug_str:0000000000000827 .LASF104
     /tmp/ccYLWH9O.s:3455   .debug_str:0000000000000655 .LASF105
     /tmp/ccYLWH9O.s:3315   .debug_str:0000000000000270 .LASF106
     /tmp/ccYLWH9O.s:3383   .debug_str:0000000000000484 .LASF150
GAS LISTING /tmp/ccYLWH9O.s 			page 31


     /tmp/ccYLWH9O.s:3465   .debug_str:000000000000068a .LASF107
     /tmp/ccYLWH9O.s:3365   .debug_str:00000000000003fe .LASF108
     /tmp/ccYLWH9O.s:3291   .debug_str:00000000000001cb .LASF109
     /tmp/ccYLWH9O.s:3347   .debug_str:000000000000038a .LASF110
     /tmp/ccYLWH9O.s:3411   .debug_str:0000000000000540 .LASF111
     /tmp/ccYLWH9O.s:3295   .debug_str:00000000000001f1 .LASF151
     /tmp/ccYLWH9O.s:3537   .debug_str:0000000000000919 .LASF112
     /tmp/ccYLWH9O.s:3305   .debug_str:000000000000022a .LASF113
     /tmp/ccYLWH9O.s:3367   .debug_str:000000000000040a .LASF114
     /tmp/ccYLWH9O.s:3297   .debug_str:00000000000001f9 .LASF115
     /tmp/ccYLWH9O.s:3233   .debug_str:0000000000000005 .LASF116
     /tmp/ccYLWH9O.s:3361   .debug_str:00000000000003e4 .LASF117
     /tmp/ccYLWH9O.s:3445   .debug_str:0000000000000618 .LASF118
     /tmp/ccYLWH9O.s:3419   .debug_str:0000000000000572 .LASF119
     /tmp/ccYLWH9O.s:3275   .debug_str:0000000000000148 .LASF120
     /tmp/ccYLWH9O.s:3259   .debug_str:00000000000000d6 .LASF121
     /tmp/ccYLWH9O.s:3491   .debug_str:0000000000000806 .LASF152
     /tmp/ccYLWH9O.s:3231   .debug_str:0000000000000000 .LASF122
     /tmp/ccYLWH9O.s:3533   .debug_str:00000000000008fb .LASF123
     /tmp/ccYLWH9O.s:3485   .debug_str:00000000000007d7 .LASF124
     /tmp/ccYLWH9O.s:3479   .debug_str:00000000000007b0 .LASF125
     /tmp/ccYLWH9O.s:3459   .debug_str:000000000000066e .LASF126
     /tmp/ccYLWH9O.s:3395   .debug_str:00000000000004d3 .LASF127
     /tmp/ccYLWH9O.s:3441   .debug_str:0000000000000602 .LASF128
     /tmp/ccYLWH9O.s:3247   .debug_str:0000000000000070 .LASF130
     /tmp/ccYLWH9O.s:3353   .debug_str:00000000000003a1 .LASF132
     /tmp/ccYLWH9O.s:3267   .debug_str:000000000000011b .LASF153
     /tmp/ccYLWH9O.s:3235   .debug_str:0000000000000015 .LASF154
     /tmp/ccYLWH9O.s:3435   .debug_str:00000000000005d5 .LASF133
     /tmp/ccYLWH9O.s:3527   .debug_str:00000000000008ce .LASF155
     /tmp/ccYLWH9O.s:3407   .debug_str:0000000000000532 .LASF134
     /tmp/ccYLWH9O.s:144    .text:0000000000000070 .LFB47
     /tmp/ccYLWH9O.s:752    .text:000000000000033c .LFE47
     /tmp/ccYLWH9O.s:3449   .debug_str:0000000000000641 .LASF135
     /tmp/ccYLWH9O.s:3221   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccYLWH9O.s:3475   .debug_str:0000000000000797 .LASF136
     /tmp/ccYLWH9O.s:3507   .debug_str:0000000000000879 .LASF137
     /tmp/ccYLWH9O.s:371    .text:00000000000001a4 .LBB58
     /tmp/ccYLWH9O.s:386    .text:00000000000001b0 .LBE58
     /tmp/ccYLWH9O.s:392    .text:00000000000001b8 .LBB60
     /tmp/ccYLWH9O.s:407    .text:00000000000001c4 .LBE60
     /tmp/ccYLWH9O.s:527    .text:000000000000021c .LBB62
     /tmp/ccYLWH9O.s:538    .text:0000000000000220 .LBE62
     /tmp/ccYLWH9O.s:3173   .debug_loc:0000000000000000 .LLST2
     /tmp/ccYLWH9O.s:543    .text:0000000000000224 .LBB64
     /tmp/ccYLWH9O.s:555    .text:0000000000000228 .LBE64
     /tmp/ccYLWH9O.s:3180   .debug_loc:0000000000000023 .LLST3
     /tmp/ccYLWH9O.s:503    .text:0000000000000204 .LVL8
     /tmp/ccYLWH9O.s:577    .text:0000000000000244 .LVL13
     /tmp/ccYLWH9O.s:592    .text:0000000000000264 .LVL14
     /tmp/ccYLWH9O.s:603    .text:0000000000000274 .LVL15
     /tmp/ccYLWH9O.s:616    .text:000000000000028c .LVL16
     /tmp/ccYLWH9O.s:628    .text:00000000000002a0 .LVL17
     /tmp/ccYLWH9O.s:640    .text:00000000000002b4 .LVL18
     /tmp/ccYLWH9O.s:652    .text:00000000000002c8 .LVL19
     /tmp/ccYLWH9O.s:664    .text:00000000000002dc .LVL20
     /tmp/ccYLWH9O.s:677    .text:00000000000002f4 .LVL21
GAS LISTING /tmp/ccYLWH9O.s 			page 32


     /tmp/ccYLWH9O.s:688    .text:0000000000000304 .LVL22
     /tmp/ccYLWH9O.s:707    .text:0000000000000318 .LVL23
     /tmp/ccYLWH9O.s:305    .text:0000000000000120 .LBB50
     /tmp/ccYLWH9O.s:361    .text:00000000000001a0 .LBE50
     /tmp/ccYLWH9O.s:307    .text:0000000000000120 .LBB51
     /tmp/ccYLWH9O.s:322    .text:000000000000012c .LBE51
     /tmp/ccYLWH9O.s:329    .text:0000000000000140 .LVL2
     /tmp/ccYLWH9O.s:337    .text:0000000000000158 .LVL3
     /tmp/ccYLWH9O.s:342    .text:0000000000000168 .LVL4
     /tmp/ccYLWH9O.s:347    .text:0000000000000178 .LVL5
     /tmp/ccYLWH9O.s:355    .text:0000000000000190 .LVL6
     /tmp/ccYLWH9O.s:360    .text:00000000000001a0 .LVL7
     /tmp/ccYLWH9O.s:156    .text:0000000000000080 .LBB35
     /tmp/ccYLWH9O.s:171    .text:000000000000008c .LBE35
     /tmp/ccYLWH9O.s:175    .text:0000000000000090 .LBB37
     /tmp/ccYLWH9O.s:190    .text:000000000000009c .LBE37
     /tmp/ccYLWH9O.s:194    .text:00000000000000a0 .LBB39
     /tmp/ccYLWH9O.s:209    .text:00000000000000ac .LBE39
     /tmp/ccYLWH9O.s:213    .text:00000000000000b0 .LBB41
     /tmp/ccYLWH9O.s:228    .text:00000000000000bc .LBE41
     /tmp/ccYLWH9O.s:232    .text:00000000000000c0 .LBB43
     /tmp/ccYLWH9O.s:247    .text:00000000000000cc .LBE43
     /tmp/ccYLWH9O.s:251    .text:00000000000000d0 .LBB45
     /tmp/ccYLWH9O.s:266    .text:00000000000000dc .LBE45
     /tmp/ccYLWH9O.s:726    .text:0000000000000324 .LBB53
     /tmp/ccYLWH9O.s:741    .text:0000000000000330 .LBE53
     /tmp/ccYLWH9O.s:3187   .debug_loc:0000000000000046 .LLST1
     /tmp/ccYLWH9O.s:746    .text:0000000000000338 .LVL26
     /tmp/ccYLWH9O.s:76     .text:000000000000003c .LFB46
     /tmp/ccYLWH9O.s:127    .text:0000000000000070 .LFE46
     /tmp/ccYLWH9O.s:3195   .debug_loc:000000000000006a .LLST0
     /tmp/ccYLWH9O.s:86     .text:0000000000000048 .LBB33
     /tmp/ccYLWH9O.s:103    .text:0000000000000054 .LBE33
     /tmp/ccYLWH9O.s:41     .text:000000000000001c .LFB45
     /tmp/ccYLWH9O.s:70     .text:000000000000003c .LFE45
     /tmp/ccYLWH9O.s:10     .text:0000000000000000 .LFB44
     /tmp/ccYLWH9O.s:35     .text:000000000000001c .LFE44
     /tmp/ccYLWH9O.s:3499   .debug_str:000000000000085a .LASF138
     /tmp/ccYLWH9O.s:3359   .debug_str:00000000000003dd .LASF139
     /tmp/ccYLWH9O.s:3319   .debug_str:000000000000029e .LASF140
     /tmp/ccYLWH9O.s:3263   .debug_str:00000000000000f8 .LASF141
     /tmp/ccYLWH9O.s:3531   .debug_str:00000000000008ef .LASF142
     /tmp/ccYLWH9O.s:3439   .debug_str:00000000000005f3 .LASF143
     /tmp/ccYLWH9O.s:3391   .debug_str:00000000000004b5 .LASF144
     /tmp/ccYLWH9O.s:3301   .debug_str:0000000000000215 .LASF145
     /tmp/ccYLWH9O.s:526    .text:000000000000021c .LVL9
     /tmp/ccYLWH9O.s:535    .text:0000000000000220 .LVL10
     /tmp/ccYLWH9O.s:542    .text:0000000000000224 .LVL11
     /tmp/ccYLWH9O.s:551    .text:0000000000000228 .LVL12
     /tmp/ccYLWH9O.s:725    .text:0000000000000324 .LVL24
     /tmp/ccYLWH9O.s:738    .text:0000000000000330 .LVL25
     /tmp/ccYLWH9O.s:101    .text:0000000000000054 .LVL0
     /tmp/ccYLWH9O.s:107    .text:0000000000000058 .LVL1
     /tmp/ccYLWH9O.s:761    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccYLWH9O.s:369    .text:00000000000001a4 .LBB57
     /tmp/ccYLWH9O.s:556    .text:0000000000000228 .LBE57
     /tmp/ccYLWH9O.s:571    .text:0000000000000238 .LBB66
GAS LISTING /tmp/ccYLWH9O.s 			page 33


     /tmp/ccYLWH9O.s:722    .text:0000000000000324 .LBE66

UNDEFINED SYMBOLS
_Z11printStringPKc
_Z8printIntiii
_ZN3ABI15memAllocWrapperEm
_ZN3ABI14memFreeWrapperEm
_ZN3ABI19threadCreateWrapperEmmmm
_ZN3ABI17threadExitWrapperEv
_ZN3ABI14semOpenWrapperEmm
_ZN3ABI15semCloseWrapperEm
_ZN3ABI14semWaitWrapperEm
_ZN3ABI16semSignalWrapperEm
_ZN3ABI17semTryWaitWrapperEm
__putc
__getc
_ZN3TCB8dispatchEv
console_handler
