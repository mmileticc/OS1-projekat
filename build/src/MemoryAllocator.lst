GAS LISTING /tmp/ccdYPJB1.s 			page 1


   1              		.file	"MemoryAllocator.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN15MemoryAllocator9initilazeEv
   9              	_ZN15MemoryAllocator9initilazeEv:
  10              	.LFB3:
  11              		.file 1 "src/MemoryAllocator.cpp"
   1:src/MemoryAllocator.cpp **** //
   2:src/MemoryAllocator.cpp **** // Created by os on 6/22/24.
   3:src/MemoryAllocator.cpp **** //
   4:src/MemoryAllocator.cpp **** #include "../h/MemoryAllocator.hpp"
   5:src/MemoryAllocator.cpp **** #include "../lib/mem.h"
   6:src/MemoryAllocator.cpp **** 
   7:src/MemoryAllocator.cpp **** MemoryAllocator::memSeg *MemoryAllocator::freeSegHead = nullptr;
   8:src/MemoryAllocator.cpp **** size_t MemoryAllocator::memSegSize = sizeof(MemoryAllocator::memSeg);
   9:src/MemoryAllocator.cpp **** 
  10:src/MemoryAllocator.cpp **** void MemoryAllocator::initilaze () {
  12              		.loc 1 10 36
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  11:src/MemoryAllocator.cpp **** 
  12:src/MemoryAllocator.cpp ****     MemoryAllocator::freeSegHead = (memSeg *) HEAP_START_ADDR;
  20              		.loc 1 12 5
  21              		.loc 1 12 34 is_stmt 0
  22 000c 97070000 		la	a5,HEAP_START_ADDR
  22      83B70700 
  23 0014 03B70700 		ld	a4,0(a5)
  24 0018 97060000 		lla	a3,.LANCHOR0
  24      93860600 
  25 0020 23B0E600 		sd	a4,0(a3)
  13:src/MemoryAllocator.cpp ****     freeSegHead->numOfBlocks = ((uint64) HEAP_END_ADDR - (uint64) HEAP_START_ADDR) / MEM_BLOCK_SIZE
  26              		.loc 1 13 5 is_stmt 1
  27              		.loc 1 13 56 is_stmt 0
  28 0024 97070000 		la	a5,HEAP_END_ADDR
  28      83B70700 
  29 002c 83B70700 		ld	a5,0(a5)
  30 0030 B387E740 		sub	a5,a5,a4
  31              		.loc 1 13 84
  32 0034 93D76700 		srli	a5,a5,6
  33              		.loc 1 13 30
  34 0038 2330F700 		sd	a5,0(a4)
  14:src/MemoryAllocator.cpp ****     freeSegHead->next = nullptr;
  35              		.loc 1 14 5 is_stmt 1
  36              		.loc 1 14 18 is_stmt 0
  37 003c 83B70600 		ld	a5,0(a3)
  38              		.loc 1 14 23
  39 0040 23B40700 		sd	zero,8(a5)
  15:src/MemoryAllocator.cpp **** }
  40              		.loc 1 15 1
GAS LISTING /tmp/ccdYPJB1.s 			page 2


  41 0044 03348100 		ld	s0,8(sp)
  42              		.cfi_restore 8
  43              		.cfi_def_cfa 2, 16
  44 0048 13010101 		addi	sp,sp,16
  45              		.cfi_def_cfa_offset 0
  46 004c 67800000 		jr	ra
  47              		.cfi_endproc
  48              	.LFE3:
  50              		.align	2
  51              		.globl	_ZN15MemoryAllocator9mem_allocEm
  53              	_ZN15MemoryAllocator9mem_allocEm:
  54              	.LFB4:
  16:src/MemoryAllocator.cpp **** 
  17:src/MemoryAllocator.cpp **** void *MemoryAllocator::mem_alloc (size_t numOfBlocks) {
  55              		.loc 1 17 55 is_stmt 1
  56              		.cfi_startproc
  57              	.LVL0:
  58 0050 130101FF 		addi	sp,sp,-16
  59              		.cfi_def_cfa_offset 16
  60 0054 23348100 		sd	s0,8(sp)
  61              		.cfi_offset 8, -8
  62 0058 13040101 		addi	s0,sp,16
  63              		.cfi_def_cfa 8, 0
  64 005c 13070500 		mv	a4,a0
  18:src/MemoryAllocator.cpp **** 
  19:src/MemoryAllocator.cpp ****     if (numOfBlocks < 0) return nullptr;
  65              		.loc 1 19 5
  20:src/MemoryAllocator.cpp ****     memSeg *curr = MemoryAllocator::freeSegHead, *prev = nullptr;
  66              		.loc 1 20 5
  67              		.loc 1 20 13 is_stmt 0
  68 0060 17050000 		ld	a0,.LANCHOR0
  68      03350500 
  69              	.LVL1:
  70              		.loc 1 20 51
  71 0068 93060000 		li	a3,0
  72              	.LVL2:
  73              	.L5:
  21:src/MemoryAllocator.cpp **** 
  22:src/MemoryAllocator.cpp ****     //Jumps out when place is found or when there is no free space (curr is nullptr)
  23:src/MemoryAllocator.cpp ****     // Using algorithm first fit
  24:src/MemoryAllocator.cpp ****     for (; curr != nullptr && numOfBlocks > curr->numOfBlocks; prev = curr, curr = curr->next);
  74              		.loc 1 24 5 is_stmt 1 discriminator 3
  75              		.loc 1 24 28 discriminator 3
  76 006c 630C0500 		beqz	a0,.L4
  77              		.loc 1 24 51 is_stmt 0 discriminator 1
  78 0070 83370500 		ld	a5,0(a0)
  79              		.loc 1 24 28 discriminator 1
  80 0074 63F8E700 		bgeu	a5,a4,.L4
  81              		.loc 1 24 5 is_stmt 1 discriminator 2
  82              	.LVL3:
  83              		.loc 1 24 69 is_stmt 0 discriminator 2
  84 0078 93060500 		mv	a3,a0
  85              		.loc 1 24 82 discriminator 2
  86 007c 03358500 		ld	a0,8(a0)
  87              	.LVL4:
  88              		.loc 1 24 5 discriminator 2
  89 0080 6FF0DFFE 		j	.L5
GAS LISTING /tmp/ccdYPJB1.s 			page 3


  90              	.L4:
  25:src/MemoryAllocator.cpp **** 
  26:src/MemoryAllocator.cpp ****     if (curr == nullptr) {
  91              		.loc 1 26 5 is_stmt 1
  92 0084 63020504 		beqz	a0,.L3
  27:src/MemoryAllocator.cpp ****         return nullptr;
  28:src/MemoryAllocator.cpp ****     }
  29:src/MemoryAllocator.cpp **** 
  30:src/MemoryAllocator.cpp ****     if (numOfBlocks < curr->numOfBlocks) {
  93              		.loc 1 30 5
  94              	.LBB2:
  95              		.loc 1 30 29 is_stmt 0
  96 0088 03360500 		ld	a2,0(a0)
  97              		.loc 1 30 5
  98 008c 637AC704 		bleu	a2,a4,.L7
  99              	.LBB3:
  31:src/MemoryAllocator.cpp ****         //At least one block left unallocated
  32:src/MemoryAllocator.cpp ****         size_t newSeg = (size_t) curr + numOfBlocks * MEM_BLOCK_SIZE;  //starting address of a newS
 100              		.loc 1 32 9 is_stmt 1
 101              		.loc 1 32 53 is_stmt 0
 102 0090 93176700 		slli	a5,a4,6
 103              		.loc 1 32 16
 104 0094 B387A700 		add	a5,a5,a0
  33:src/MemoryAllocator.cpp ****         memSeg *tmp = (memSeg *) newSeg;
 105              		.loc 1 33 9 is_stmt 1
 106              	.LVL5:
  34:src/MemoryAllocator.cpp ****         tmp->numOfBlocks = curr->numOfBlocks - numOfBlocks;  //remaining number of blocks
 107              		.loc 1 34 9
 108              		.loc 1 34 46 is_stmt 0
 109 0098 3306E640 		sub	a2,a2,a4
 110              		.loc 1 34 26
 111 009c 23B0C700 		sd	a2,0(a5)
  35:src/MemoryAllocator.cpp ****         tmp->next = curr->next;
 112              		.loc 1 35 9 is_stmt 1
 113              		.loc 1 35 27 is_stmt 0
 114 00a0 03368500 		ld	a2,8(a0)
 115              		.loc 1 35 19
 116 00a4 23B4C700 		sd	a2,8(a5)
  36:src/MemoryAllocator.cpp ****         tmp->prev = curr->prev;
 117              		.loc 1 36 9 is_stmt 1
 118              		.loc 1 36 27 is_stmt 0
 119 00a8 83350501 		ld	a1,16(a0)
 120              		.loc 1 36 19
 121 00ac 23B8B700 		sd	a1,16(a5)
  37:src/MemoryAllocator.cpp ****         if(tmp->next) tmp->next->prev = tmp;
 122              		.loc 1 37 9 is_stmt 1
 123 00b0 63040600 		beqz	a2,.L8
 124              		.loc 1 37 23 discriminator 1
 125              		.loc 1 37 39 is_stmt 0 discriminator 1
 126 00b4 2338F600 		sd	a5,16(a2)
 127              	.L8:
  38:src/MemoryAllocator.cpp ****         if (prev) prev->next = tmp;
 128              		.loc 1 38 9 is_stmt 1
 129 00b8 638E0600 		beqz	a3,.L9
 130              		.loc 1 38 19 discriminator 1
 131              		.loc 1 38 30 is_stmt 0 discriminator 1
 132 00bc 23B4F600 		sd	a5,8(a3)
GAS LISTING /tmp/ccdYPJB1.s 			page 4


 133              	.LVL6:
 134              	.L10:
 135              	.LBE3:
 136              	.LBE2:
  39:src/MemoryAllocator.cpp ****         else {
  40:src/MemoryAllocator.cpp ****             MemoryAllocator::freeSegHead = tmp;
  41:src/MemoryAllocator.cpp ****         }
  42:src/MemoryAllocator.cpp **** 
  43:src/MemoryAllocator.cpp ****     } else {
  44:src/MemoryAllocator.cpp ****         //No blocks left to allocate, exact equal size
  45:src/MemoryAllocator.cpp ****         if (prev) prev->next = curr->next;
  46:src/MemoryAllocator.cpp ****         else MemoryAllocator::freeSegHead = curr->next;
  47:src/MemoryAllocator.cpp **** 
  48:src/MemoryAllocator.cpp ****     }
  49:src/MemoryAllocator.cpp ****     curr->numOfBlocks = numOfBlocks;
 137              		.loc 1 49 5 is_stmt 1
 138              		.loc 1 49 23 is_stmt 0
 139 00c0 2330E500 		sd	a4,0(a0)
  50:src/MemoryAllocator.cpp ****     memSeg* shifted = curr + 1;
 140              		.loc 1 50 5 is_stmt 1
 141              		.loc 1 50 13 is_stmt 0
 142 00c4 13058501 		addi	a0,a0,24
 143              	.LVL7:
  51:src/MemoryAllocator.cpp ****     return (void*) shifted; // return curr moved for sizeof(segHeader);
 144              		.loc 1 51 5 is_stmt 1
 145              	.L3:
  52:src/MemoryAllocator.cpp **** }
 146              		.loc 1 52 1 is_stmt 0
 147 00c8 03348100 		ld	s0,8(sp)
 148              		.cfi_remember_state
 149              		.cfi_restore 8
 150              		.cfi_def_cfa 2, 16
 151 00cc 13010101 		addi	sp,sp,16
 152              		.cfi_def_cfa_offset 0
 153 00d0 67800000 		jr	ra
 154              	.LVL8:
 155              	.L9:
 156              		.cfi_restore_state
 157              	.LBB5:
 158              	.LBB4:
  40:src/MemoryAllocator.cpp ****         }
 159              		.loc 1 40 13 is_stmt 1
  40:src/MemoryAllocator.cpp ****         }
 160              		.loc 1 40 42 is_stmt 0
 161 00d4 97060000 		sd	a5,.LANCHOR0,a3
 161      23B0F600 
 162              	.LVL9:
 163 00dc 6FF05FFE 		j	.L10
 164              	.LVL10:
 165              	.L7:
 166              	.LBE4:
  45:src/MemoryAllocator.cpp ****         else MemoryAllocator::freeSegHead = curr->next;
 167              		.loc 1 45 9 is_stmt 1
 168 00e0 63880600 		beqz	a3,.L11
  45:src/MemoryAllocator.cpp ****         else MemoryAllocator::freeSegHead = curr->next;
 169              		.loc 1 45 19 discriminator 1
  45:src/MemoryAllocator.cpp ****         else MemoryAllocator::freeSegHead = curr->next;
GAS LISTING /tmp/ccdYPJB1.s 			page 5


 170              		.loc 1 45 38 is_stmt 0 discriminator 1
 171 00e4 83378500 		ld	a5,8(a0)
  45:src/MemoryAllocator.cpp ****         else MemoryAllocator::freeSegHead = curr->next;
 172              		.loc 1 45 30 discriminator 1
 173 00e8 23B4F600 		sd	a5,8(a3)
 174 00ec 6FF05FFD 		j	.L10
 175              	.L11:
  46:src/MemoryAllocator.cpp **** 
 176              		.loc 1 46 14 is_stmt 1
  46:src/MemoryAllocator.cpp **** 
 177              		.loc 1 46 51 is_stmt 0
 178 00f0 83378500 		ld	a5,8(a0)
  46:src/MemoryAllocator.cpp **** 
 179              		.loc 1 46 43
 180 00f4 97060000 		sd	a5,.LANCHOR0,a3
 180      23B0F600 
 181              	.LVL11:
 182 00fc 6FF05FFC 		j	.L10
 183              	.LBE5:
 184              		.cfi_endproc
 185              	.LFE4:
 187              		.align	2
 188              		.globl	_ZN15MemoryAllocator10tryToMergeEPNS_6memSegES1_
 190              	_ZN15MemoryAllocator10tryToMergeEPNS_6memSegES1_:
 191              	.LFB6:
  53:src/MemoryAllocator.cpp **** 
  54:src/MemoryAllocator.cpp **** int MemoryAllocator::mem_free (void *p) {
  55:src/MemoryAllocator.cpp **** 
  56:src/MemoryAllocator.cpp **** 
  57:src/MemoryAllocator.cpp ****     memSeg *tmp = (memSeg *) p - 1;
  58:src/MemoryAllocator.cpp **** 
  59:src/MemoryAllocator.cpp ****     // No free space, what we dealoc will be only free space on heap
  60:src/MemoryAllocator.cpp ****     if (!freeSegHead) {
  61:src/MemoryAllocator.cpp ****         tmp->next = nullptr;
  62:src/MemoryAllocator.cpp ****         tmp->prev = nullptr;
  63:src/MemoryAllocator.cpp ****         MemoryAllocator::freeSegHead = tmp;
  64:src/MemoryAllocator.cpp ****         return 0;
  65:src/MemoryAllocator.cpp ****     }
  66:src/MemoryAllocator.cpp **** 
  67:src/MemoryAllocator.cpp ****     memSeg *curr = freeSegHead;
  68:src/MemoryAllocator.cpp **** 
  69:src/MemoryAllocator.cpp ****     //find the place for segment in the list
  70:src/MemoryAllocator.cpp ****     for (; curr < tmp && curr->next != nullptr; curr = curr->next);
  71:src/MemoryAllocator.cpp **** 
  72:src/MemoryAllocator.cpp ****     //case that p is already free
  73:src/MemoryAllocator.cpp ****     if(curr != freeSegHead){
  74:src/MemoryAllocator.cpp ****         if((size_t)curr->prev + (size_t)curr->prev->numOfBlocks * MEM_BLOCK_SIZE > (size_t)curr)
  75:src/MemoryAllocator.cpp ****             return -1;
  76:src/MemoryAllocator.cpp ****     }
  77:src/MemoryAllocator.cpp **** 
  78:src/MemoryAllocator.cpp **** 
  79:src/MemoryAllocator.cpp ****     //segment is first in the list
  80:src/MemoryAllocator.cpp ****     if (curr == freeSegHead) {
  81:src/MemoryAllocator.cpp ****         curr->prev = tmp;
  82:src/MemoryAllocator.cpp ****         tmp->prev = nullptr;
  83:src/MemoryAllocator.cpp ****         tmp->next = curr;
  84:src/MemoryAllocator.cpp ****         MemoryAllocator::freeSegHead = tmp;
GAS LISTING /tmp/ccdYPJB1.s 			page 6


  85:src/MemoryAllocator.cpp ****         tryToMerge(tmp, tmp->next);
  86:src/MemoryAllocator.cpp ****         return 0;
  87:src/MemoryAllocator.cpp ****     } else {
  88:src/MemoryAllocator.cpp ****         //segment is last in the list
  89:src/MemoryAllocator.cpp ****         if (tmp > curr) {
  90:src/MemoryAllocator.cpp ****             curr->next = tmp;
  91:src/MemoryAllocator.cpp ****             tmp->prev = curr;
  92:src/MemoryAllocator.cpp ****             tmp->next = nullptr;
  93:src/MemoryAllocator.cpp ****             tryToMerge(tmp->prev, tmp);
  94:src/MemoryAllocator.cpp ****             return 0;
  95:src/MemoryAllocator.cpp ****         } else {
  96:src/MemoryAllocator.cpp ****             //segment is somewhere in the middle
  97:src/MemoryAllocator.cpp ****             tmp->next = curr;
  98:src/MemoryAllocator.cpp ****             tmp->prev = curr->prev;
  99:src/MemoryAllocator.cpp ****             curr->prev->next = tmp;
 100:src/MemoryAllocator.cpp ****             curr->prev = tmp;
 101:src/MemoryAllocator.cpp ****             tryToMerge(tmp, tmp->next);
 102:src/MemoryAllocator.cpp ****             tryToMerge(tmp->prev, tmp);
 103:src/MemoryAllocator.cpp ****             return 0;
 104:src/MemoryAllocator.cpp **** 
 105:src/MemoryAllocator.cpp ****         }
 106:src/MemoryAllocator.cpp ****     }
 107:src/MemoryAllocator.cpp **** 
 108:src/MemoryAllocator.cpp **** }
 109:src/MemoryAllocator.cpp **** 
 110:src/MemoryAllocator.cpp **** void MemoryAllocator::tryToMerge (memSeg *main, memSeg *to_merge) {
 192              		.loc 1 110 67 is_stmt 1
 193              		.cfi_startproc
 194              	.LVL12:
 195 0100 130101FF 		addi	sp,sp,-16
 196              		.cfi_def_cfa_offset 16
 197 0104 23348100 		sd	s0,8(sp)
 198              		.cfi_offset 8, -8
 199 0108 13040101 		addi	s0,sp,16
 200              		.cfi_def_cfa 8, 0
 111:src/MemoryAllocator.cpp ****     if (main + main->numOfBlocks == to_merge) {
 201              		.loc 1 111 5
 202              		.loc 1 111 22 is_stmt 0
 203 010c 03370500 		ld	a4,0(a0)
 204              		.loc 1 111 14
 205 0110 93171700 		slli	a5,a4,1
 206 0114 B387E700 		add	a5,a5,a4
 207 0118 93973700 		slli	a5,a5,3
 208 011c B307F500 		add	a5,a0,a5
 209              		.loc 1 111 5
 210 0120 6388B700 		beq	a5,a1,.L16
 211              	.L13:
 112:src/MemoryAllocator.cpp ****         //Needs to be merged
 113:src/MemoryAllocator.cpp ****         main->numOfBlocks += to_merge->numOfBlocks;
 114:src/MemoryAllocator.cpp ****         main->next = to_merge->next;
 115:src/MemoryAllocator.cpp ****         to_merge->next->prev = main;
 116:src/MemoryAllocator.cpp **** 
 117:src/MemoryAllocator.cpp ****     }
 118:src/MemoryAllocator.cpp **** 
 119:src/MemoryAllocator.cpp **** }...
 212              		.loc 1 119 1
 213 0124 03348100 		ld	s0,8(sp)
GAS LISTING /tmp/ccdYPJB1.s 			page 7


 214              		.cfi_remember_state
 215              		.cfi_restore 8
 216              		.cfi_def_cfa 2, 16
 217 0128 13010101 		addi	sp,sp,16
 218              		.cfi_def_cfa_offset 0
 219 012c 67800000 		jr	ra
 220              	.L16:
 221              		.cfi_restore_state
 113:src/MemoryAllocator.cpp ****         main->numOfBlocks += to_merge->numOfBlocks;
 222              		.loc 1 113 9 is_stmt 1
 113:src/MemoryAllocator.cpp ****         main->numOfBlocks += to_merge->numOfBlocks;
 223              		.loc 1 113 40 is_stmt 0
 224 0130 83B70500 		ld	a5,0(a1)
 113:src/MemoryAllocator.cpp ****         main->numOfBlocks += to_merge->numOfBlocks;
 225              		.loc 1 113 27
 226 0134 3307F700 		add	a4,a4,a5
 227 0138 2330E500 		sd	a4,0(a0)
 114:src/MemoryAllocator.cpp ****         main->next = to_merge->next;
 228              		.loc 1 114 9 is_stmt 1
 114:src/MemoryAllocator.cpp ****         main->next = to_merge->next;
 229              		.loc 1 114 32 is_stmt 0
 230 013c 83B78500 		ld	a5,8(a1)
 114:src/MemoryAllocator.cpp ****         main->next = to_merge->next;
 231              		.loc 1 114 20
 232 0140 2334F500 		sd	a5,8(a0)
 115:src/MemoryAllocator.cpp ****         to_merge->next->prev = main;
 233              		.loc 1 115 9 is_stmt 1
 115:src/MemoryAllocator.cpp ****         to_merge->next->prev = main;
 234              		.loc 1 115 30 is_stmt 0
 235 0144 23B8A700 		sd	a0,16(a5)
 236              		.loc 1 119 1
 237 0148 6FF0DFFD 		j	.L13
 238              		.cfi_endproc
 239              	.LFE6:
 241              		.align	2
 242              		.globl	_ZN15MemoryAllocator8mem_freeEPv
 244              	_ZN15MemoryAllocator8mem_freeEPv:
 245              	.LFB5:
  54:src/MemoryAllocator.cpp **** int MemoryAllocator::mem_free (void *p) {
 246              		.loc 1 54 41 is_stmt 1
 247              		.cfi_startproc
 248              	.LVL13:
 249 014c 130101FE 		addi	sp,sp,-32
 250              		.cfi_def_cfa_offset 32
 251 0150 233C1100 		sd	ra,24(sp)
 252 0154 23388100 		sd	s0,16(sp)
 253 0158 23349100 		sd	s1,8(sp)
 254 015c 23302101 		sd	s2,0(sp)
 255              		.cfi_offset 1, -8
 256              		.cfi_offset 8, -16
 257              		.cfi_offset 9, -24
 258              		.cfi_offset 18, -32
 259 0160 13040102 		addi	s0,sp,32
 260              		.cfi_def_cfa 8, 0
 261 0164 13090500 		mv	s2,a0
  57:src/MemoryAllocator.cpp ****     memSeg *tmp = (memSeg *) p - 1;
 262              		.loc 1 57 5
GAS LISTING /tmp/ccdYPJB1.s 			page 8


  57:src/MemoryAllocator.cpp ****     memSeg *tmp = (memSeg *) p - 1;
 263              		.loc 1 57 13 is_stmt 0
 264 0168 930485FE 		addi	s1,a0,-24
 265              	.LVL14:
  60:src/MemoryAllocator.cpp ****     if (!freeSegHead) {
 266              		.loc 1 60 5 is_stmt 1
  60:src/MemoryAllocator.cpp ****     if (!freeSegHead) {
 267              		.loc 1 60 9 is_stmt 0
 268 016c 17070000 		ld	a4,.LANCHOR0
 268      03370700 
  60:src/MemoryAllocator.cpp ****     if (!freeSegHead) {
 269              		.loc 1 60 5
 270 0174 63060700 		beqz	a4,.L28
  67:src/MemoryAllocator.cpp ****     memSeg *curr = freeSegHead;
 271              		.loc 1 67 13
 272 0178 13050700 		mv	a0,a4
 273              	.LVL15:
 274 017c 6F000002 		j	.L18
 275              	.LVL16:
 276              	.L28:
  61:src/MemoryAllocator.cpp ****         tmp->next = nullptr;
 277              		.loc 1 61 9 is_stmt 1
  61:src/MemoryAllocator.cpp ****         tmp->next = nullptr;
 278              		.loc 1 61 19 is_stmt 0
 279 0180 233805FE 		sd	zero,-16(a0)
  62:src/MemoryAllocator.cpp ****         tmp->prev = nullptr;
 280              		.loc 1 62 9 is_stmt 1
  62:src/MemoryAllocator.cpp ****         tmp->prev = nullptr;
 281              		.loc 1 62 19 is_stmt 0
 282 0184 233C05FE 		sd	zero,-8(a0)
  63:src/MemoryAllocator.cpp ****         MemoryAllocator::freeSegHead = tmp;
 283              		.loc 1 63 9 is_stmt 1
  63:src/MemoryAllocator.cpp ****         MemoryAllocator::freeSegHead = tmp;
 284              		.loc 1 63 38 is_stmt 0
 285 0188 97070000 		sd	s1,.LANCHOR0,a5
 285      23B09700 
  64:src/MemoryAllocator.cpp ****         return 0;
 286              		.loc 1 64 9 is_stmt 1
  64:src/MemoryAllocator.cpp ****         return 0;
 287              		.loc 1 64 16 is_stmt 0
 288 0190 13050000 		li	a0,0
 289              	.LVL17:
 290 0194 6F000005 		j	.L19
 291              	.LVL18:
 292              	.L25:
  70:src/MemoryAllocator.cpp ****     for (; curr < tmp && curr->next != nullptr; curr = curr->next);
 293              		.loc 1 70 54
 294 0198 13850700 		mv	a0,a5
 295              	.LVL19:
 296              	.L18:
  70:src/MemoryAllocator.cpp ****     for (; curr < tmp && curr->next != nullptr; curr = curr->next);
 297              		.loc 1 70 5 is_stmt 1 discriminator 3
  70:src/MemoryAllocator.cpp ****     for (; curr < tmp && curr->next != nullptr; curr = curr->next);
 298              		.loc 1 70 23 discriminator 3
 299 019c 63769500 		bgeu	a0,s1,.L20
  70:src/MemoryAllocator.cpp ****     for (; curr < tmp && curr->next != nullptr; curr = curr->next);
 300              		.loc 1 70 32 is_stmt 0 discriminator 1
GAS LISTING /tmp/ccdYPJB1.s 			page 9


 301 01a0 83378500 		ld	a5,8(a0)
  70:src/MemoryAllocator.cpp ****     for (; curr < tmp && curr->next != nullptr; curr = curr->next);
 302              		.loc 1 70 23 discriminator 1
 303 01a4 E39A07FE 		bnez	a5,.L25
 304              	.L20:
  73:src/MemoryAllocator.cpp ****     if(curr != freeSegHead){
 305              		.loc 1 73 5 is_stmt 1
 306 01a8 630CA700 		beq	a4,a0,.L21
  74:src/MemoryAllocator.cpp ****         if((size_t)curr->prev + (size_t)curr->prev->numOfBlocks * MEM_BLOCK_SIZE > (size_t)curr)
 307              		.loc 1 74 9
  74:src/MemoryAllocator.cpp ****         if((size_t)curr->prev + (size_t)curr->prev->numOfBlocks * MEM_BLOCK_SIZE > (size_t)curr)
 308              		.loc 1 74 26 is_stmt 0
 309 01ac 83370501 		ld	a5,16(a0)
  74:src/MemoryAllocator.cpp ****         if((size_t)curr->prev + (size_t)curr->prev->numOfBlocks * MEM_BLOCK_SIZE > (size_t)curr)
 310              		.loc 1 74 53
 311 01b0 83B60700 		ld	a3,0(a5)
  74:src/MemoryAllocator.cpp ****         if((size_t)curr->prev + (size_t)curr->prev->numOfBlocks * MEM_BLOCK_SIZE > (size_t)curr)
 312              		.loc 1 74 65
 313 01b4 93966600 		slli	a3,a3,6
  74:src/MemoryAllocator.cpp ****         if((size_t)curr->prev + (size_t)curr->prev->numOfBlocks * MEM_BLOCK_SIZE > (size_t)curr)
 314              		.loc 1 74 31
 315 01b8 B387D700 		add	a5,a5,a3
  74:src/MemoryAllocator.cpp ****         if((size_t)curr->prev + (size_t)curr->prev->numOfBlocks * MEM_BLOCK_SIZE > (size_t)curr)
 316              		.loc 1 74 9
 317 01bc 6364F50A 		bgtu	a5,a0,.L26
 318              	.L21:
  80:src/MemoryAllocator.cpp ****     if (curr == freeSegHead) {
 319              		.loc 1 80 5 is_stmt 1
 320 01c0 630EA702 		beq	a4,a0,.L29
  89:src/MemoryAllocator.cpp ****         if (tmp > curr) {
 321              		.loc 1 89 9
 322 01c4 63729506 		bgeu	a0,s1,.L23
  90:src/MemoryAllocator.cpp ****             curr->next = tmp;
 323              		.loc 1 90 13
  90:src/MemoryAllocator.cpp ****             curr->next = tmp;
 324              		.loc 1 90 24 is_stmt 0
 325 01c8 23349500 		sd	s1,8(a0)
  91:src/MemoryAllocator.cpp ****             tmp->prev = curr;
 326              		.loc 1 91 13 is_stmt 1
  91:src/MemoryAllocator.cpp ****             tmp->prev = curr;
 327              		.loc 1 91 23 is_stmt 0
 328 01cc 233CA9FE 		sd	a0,-8(s2)
  92:src/MemoryAllocator.cpp ****             tmp->next = nullptr;
 329              		.loc 1 92 13 is_stmt 1
  92:src/MemoryAllocator.cpp ****             tmp->next = nullptr;
 330              		.loc 1 92 23 is_stmt 0
 331 01d0 233809FE 		sd	zero,-16(s2)
  93:src/MemoryAllocator.cpp ****             tryToMerge(tmp->prev, tmp);
 332              		.loc 1 93 13 is_stmt 1
  93:src/MemoryAllocator.cpp ****             tryToMerge(tmp->prev, tmp);
 333              		.loc 1 93 23 is_stmt 0
 334 01d4 93850400 		mv	a1,s1
 335 01d8 97000000 		call	_ZN15MemoryAllocator10tryToMergeEPNS_6memSegES1_
 335      E7800000 
 336              	.LVL20:
  94:src/MemoryAllocator.cpp ****             return 0;
 337              		.loc 1 94 13 is_stmt 1
GAS LISTING /tmp/ccdYPJB1.s 			page 10


  94:src/MemoryAllocator.cpp ****             return 0;
 338              		.loc 1 94 20 is_stmt 0
 339 01e0 13050000 		li	a0,0
 340              	.L19:
 108:src/MemoryAllocator.cpp **** }
 341              		.loc 1 108 1
 342 01e4 83308101 		ld	ra,24(sp)
 343              		.cfi_remember_state
 344              		.cfi_restore 1
 345 01e8 03340101 		ld	s0,16(sp)
 346              		.cfi_restore 8
 347              		.cfi_def_cfa 2, 32
 348 01ec 83348100 		ld	s1,8(sp)
 349              		.cfi_restore 9
 350              	.LVL21:
 351 01f0 03390100 		ld	s2,0(sp)
 352              		.cfi_restore 18
 353              	.LVL22:
 354 01f4 13010102 		addi	sp,sp,32
 355              		.cfi_def_cfa_offset 0
 356 01f8 67800000 		jr	ra
 357              	.LVL23:
 358              	.L29:
 359              		.cfi_restore_state
  81:src/MemoryAllocator.cpp ****         curr->prev = tmp;
 360              		.loc 1 81 9 is_stmt 1
  81:src/MemoryAllocator.cpp ****         curr->prev = tmp;
 361              		.loc 1 81 20 is_stmt 0
 362 01fc 23389500 		sd	s1,16(a0)
  82:src/MemoryAllocator.cpp ****         tmp->prev = nullptr;
 363              		.loc 1 82 9 is_stmt 1
  82:src/MemoryAllocator.cpp ****         tmp->prev = nullptr;
 364              		.loc 1 82 19 is_stmt 0
 365 0200 233C09FE 		sd	zero,-8(s2)
  83:src/MemoryAllocator.cpp ****         tmp->next = curr;
 366              		.loc 1 83 9 is_stmt 1
  83:src/MemoryAllocator.cpp ****         tmp->next = curr;
 367              		.loc 1 83 19 is_stmt 0
 368 0204 2338A9FE 		sd	a0,-16(s2)
  84:src/MemoryAllocator.cpp ****         MemoryAllocator::freeSegHead = tmp;
 369              		.loc 1 84 9 is_stmt 1
  84:src/MemoryAllocator.cpp ****         MemoryAllocator::freeSegHead = tmp;
 370              		.loc 1 84 38 is_stmt 0
 371 0208 97070000 		sd	s1,.LANCHOR0,a5
 371      23B09700 
  85:src/MemoryAllocator.cpp ****         tryToMerge(tmp, tmp->next);
 372              		.loc 1 85 9 is_stmt 1
  85:src/MemoryAllocator.cpp ****         tryToMerge(tmp, tmp->next);
 373              		.loc 1 85 19 is_stmt 0
 374 0210 833509FF 		ld	a1,-16(s2)
 375 0214 13850400 		mv	a0,s1
 376              	.LVL24:
 377 0218 97000000 		call	_ZN15MemoryAllocator10tryToMergeEPNS_6memSegES1_
 377      E7800000 
 378              	.LVL25:
  86:src/MemoryAllocator.cpp ****         return 0;
 379              		.loc 1 86 9 is_stmt 1
GAS LISTING /tmp/ccdYPJB1.s 			page 11


  86:src/MemoryAllocator.cpp ****         return 0;
 380              		.loc 1 86 16 is_stmt 0
 381 0220 13050000 		li	a0,0
 382 0224 6FF01FFC 		j	.L19
 383              	.LVL26:
 384              	.L23:
  97:src/MemoryAllocator.cpp ****             tmp->next = curr;
 385              		.loc 1 97 13 is_stmt 1
  97:src/MemoryAllocator.cpp ****             tmp->next = curr;
 386              		.loc 1 97 23 is_stmt 0
 387 0228 2338A9FE 		sd	a0,-16(s2)
  98:src/MemoryAllocator.cpp ****             tmp->prev = curr->prev;
 388              		.loc 1 98 13 is_stmt 1
  98:src/MemoryAllocator.cpp ****             tmp->prev = curr->prev;
 389              		.loc 1 98 31 is_stmt 0
 390 022c 83370501 		ld	a5,16(a0)
  98:src/MemoryAllocator.cpp ****             tmp->prev = curr->prev;
 391              		.loc 1 98 23
 392 0230 233CF9FE 		sd	a5,-8(s2)
  99:src/MemoryAllocator.cpp ****             curr->prev->next = tmp;
 393              		.loc 1 99 13 is_stmt 1
  99:src/MemoryAllocator.cpp ****             curr->prev->next = tmp;
 394              		.loc 1 99 30 is_stmt 0
 395 0234 23B49700 		sd	s1,8(a5)
 100:src/MemoryAllocator.cpp ****             curr->prev = tmp;
 396              		.loc 1 100 13 is_stmt 1
 100:src/MemoryAllocator.cpp ****             curr->prev = tmp;
 397              		.loc 1 100 24 is_stmt 0
 398 0238 23389500 		sd	s1,16(a0)
 101:src/MemoryAllocator.cpp ****             tryToMerge(tmp, tmp->next);
 399              		.loc 1 101 13 is_stmt 1
 101:src/MemoryAllocator.cpp ****             tryToMerge(tmp, tmp->next);
 400              		.loc 1 101 23 is_stmt 0
 401 023c 833509FF 		ld	a1,-16(s2)
 402 0240 13850400 		mv	a0,s1
 403              	.LVL27:
 404 0244 97000000 		call	_ZN15MemoryAllocator10tryToMergeEPNS_6memSegES1_
 404      E7800000 
 405              	.LVL28:
 102:src/MemoryAllocator.cpp ****             tryToMerge(tmp->prev, tmp);
 406              		.loc 1 102 13 is_stmt 1
 102:src/MemoryAllocator.cpp ****             tryToMerge(tmp->prev, tmp);
 407              		.loc 1 102 23 is_stmt 0
 408 024c 93850400 		mv	a1,s1
 409 0250 033589FF 		ld	a0,-8(s2)
 410 0254 97000000 		call	_ZN15MemoryAllocator10tryToMergeEPNS_6memSegES1_
 410      E7800000 
 411              	.LVL29:
 103:src/MemoryAllocator.cpp ****             return 0;
 412              		.loc 1 103 13 is_stmt 1
 103:src/MemoryAllocator.cpp ****             return 0;
 413              		.loc 1 103 20 is_stmt 0
 414 025c 13050000 		li	a0,0
 415 0260 6FF05FF8 		j	.L19
 416              	.LVL30:
 417              	.L26:
  75:src/MemoryAllocator.cpp ****             return -1;
GAS LISTING /tmp/ccdYPJB1.s 			page 12


 418              		.loc 1 75 21
 419 0264 1305F0FF 		li	a0,-1
 420              	.LVL31:
 421 0268 6FF0DFF7 		j	.L19
 422              		.cfi_endproc
 423              	.LFE5:
 425              		.globl	_ZN15MemoryAllocator10memSegSizeE
 426              		.globl	_ZN15MemoryAllocator11freeSegHeadE
 427              		.data
 428              		.align	3
 431              	_ZN15MemoryAllocator10memSegSizeE:
 432 0000 18000000 		.dword	24
 432      00000000 
 433              		.bss
 434              		.align	3
 435              		.set	.LANCHOR0,. + 0
 438              	_ZN15MemoryAllocator11freeSegHeadE:
 439 0000 00000000 		.zero	8
 439      00000000 
 440              		.text
 441              	.Letext0:
 442              		.file 2 "src/../h/../lib/hw.h"
 443              		.file 3 "src/../h/MemoryAllocator.hpp"
GAS LISTING /tmp/ccdYPJB1.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 MemoryAllocator.cpp
     /tmp/ccdYPJB1.s:9      .text:0000000000000000 _ZN15MemoryAllocator9initilazeEv
     /tmp/ccdYPJB1.s:13     .text:0000000000000000 .L0 
     /tmp/ccdYPJB1.s:14     .text:0000000000000000 .L0 
     /tmp/ccdYPJB1.s:15     .text:0000000000000004 .L0 
     /tmp/ccdYPJB1.s:17     .text:0000000000000008 .L0 
     /tmp/ccdYPJB1.s:19     .text:000000000000000c .L0 
     /tmp/ccdYPJB1.s:21     .text:000000000000000c .L0 
     /tmp/ccdYPJB1.s:22     .text:000000000000000c .L0 
     /tmp/ccdYPJB1.s:27     .text:0000000000000024 .L0 
     /tmp/ccdYPJB1.s:28     .text:0000000000000024 .L0 
     /tmp/ccdYPJB1.s:32     .text:0000000000000034 .L0 
     /tmp/ccdYPJB1.s:34     .text:0000000000000038 .L0 
     /tmp/ccdYPJB1.s:36     .text:000000000000003c .L0 
     /tmp/ccdYPJB1.s:37     .text:000000000000003c .L0 
     /tmp/ccdYPJB1.s:39     .text:0000000000000040 .L0 
     /tmp/ccdYPJB1.s:41     .text:0000000000000044 .L0 
     /tmp/ccdYPJB1.s:42     .text:0000000000000048 .L0 
     /tmp/ccdYPJB1.s:43     .text:0000000000000048 .L0 
     /tmp/ccdYPJB1.s:45     .text:000000000000004c .L0 
     /tmp/ccdYPJB1.s:47     .text:0000000000000050 .L0 
     /tmp/ccdYPJB1.s:53     .text:0000000000000050 _ZN15MemoryAllocator9mem_allocEm
     /tmp/ccdYPJB1.s:56     .text:0000000000000050 .L0 
     /tmp/ccdYPJB1.s:58     .text:0000000000000050 .L0 
     /tmp/ccdYPJB1.s:59     .text:0000000000000054 .L0 
     /tmp/ccdYPJB1.s:61     .text:0000000000000058 .L0 
     /tmp/ccdYPJB1.s:63     .text:000000000000005c .L0 
     /tmp/ccdYPJB1.s:66     .text:0000000000000060 .L0 
     /tmp/ccdYPJB1.s:67     .text:0000000000000060 .L0 
     /tmp/ccdYPJB1.s:68     .text:0000000000000060 .L0 
     /tmp/ccdYPJB1.s:71     .text:0000000000000068 .L0 
     /tmp/ccdYPJB1.s:75     .text:000000000000006c .L0 
     /tmp/ccdYPJB1.s:76     .text:000000000000006c .L0 
     /tmp/ccdYPJB1.s:78     .text:0000000000000070 .L0 
     /tmp/ccdYPJB1.s:80     .text:0000000000000074 .L0 
     /tmp/ccdYPJB1.s:83     .text:0000000000000078 .L0 
     /tmp/ccdYPJB1.s:84     .text:0000000000000078 .L0 
     /tmp/ccdYPJB1.s:86     .text:000000000000007c .L0 
     /tmp/ccdYPJB1.s:89     .text:0000000000000080 .L0 
     /tmp/ccdYPJB1.s:92     .text:0000000000000084 .L0 
     /tmp/ccdYPJB1.s:95     .text:0000000000000088 .L0 
     /tmp/ccdYPJB1.s:96     .text:0000000000000088 .L0 
     /tmp/ccdYPJB1.s:98     .text:000000000000008c .L0 
     /tmp/ccdYPJB1.s:101    .text:0000000000000090 .L0 
     /tmp/ccdYPJB1.s:102    .text:0000000000000090 .L0 
     /tmp/ccdYPJB1.s:104    .text:0000000000000094 .L0 
     /tmp/ccdYPJB1.s:107    .text:0000000000000098 .L0 
     /tmp/ccdYPJB1.s:108    .text:0000000000000098 .L0 
     /tmp/ccdYPJB1.s:109    .text:0000000000000098 .L0 
     /tmp/ccdYPJB1.s:111    .text:000000000000009c .L0 
     /tmp/ccdYPJB1.s:113    .text:00000000000000a0 .L0 
     /tmp/ccdYPJB1.s:114    .text:00000000000000a0 .L0 
     /tmp/ccdYPJB1.s:116    .text:00000000000000a4 .L0 
     /tmp/ccdYPJB1.s:118    .text:00000000000000a8 .L0 
     /tmp/ccdYPJB1.s:119    .text:00000000000000a8 .L0 
     /tmp/ccdYPJB1.s:121    .text:00000000000000ac .L0 
GAS LISTING /tmp/ccdYPJB1.s 			page 14


     /tmp/ccdYPJB1.s:123    .text:00000000000000b0 .L0 
     /tmp/ccdYPJB1.s:125    .text:00000000000000b4 .L0 
     /tmp/ccdYPJB1.s:126    .text:00000000000000b4 .L0 
     /tmp/ccdYPJB1.s:129    .text:00000000000000b8 .L0 
     /tmp/ccdYPJB1.s:131    .text:00000000000000bc .L0 
     /tmp/ccdYPJB1.s:132    .text:00000000000000bc .L0 
     /tmp/ccdYPJB1.s:138    .text:00000000000000c0 .L0 
     /tmp/ccdYPJB1.s:139    .text:00000000000000c0 .L0 
     /tmp/ccdYPJB1.s:141    .text:00000000000000c4 .L0 
     /tmp/ccdYPJB1.s:142    .text:00000000000000c4 .L0 
     /tmp/ccdYPJB1.s:146    .text:00000000000000c8 .L0 
     /tmp/ccdYPJB1.s:147    .text:00000000000000c8 .L0 
     /tmp/ccdYPJB1.s:148    .text:00000000000000cc .L0 
     /tmp/ccdYPJB1.s:149    .text:00000000000000cc .L0 
     /tmp/ccdYPJB1.s:150    .text:00000000000000cc .L0 
     /tmp/ccdYPJB1.s:152    .text:00000000000000d0 .L0 
     /tmp/ccdYPJB1.s:156    .text:00000000000000d4 .L0 
     /tmp/ccdYPJB1.s:160    .text:00000000000000d4 .L0 
     /tmp/ccdYPJB1.s:161    .text:00000000000000d4 .L0 
     /tmp/ccdYPJB1.s:168    .text:00000000000000e0 .L0 
     /tmp/ccdYPJB1.s:170    .text:00000000000000e4 .L0 
     /tmp/ccdYPJB1.s:171    .text:00000000000000e4 .L0 
     /tmp/ccdYPJB1.s:173    .text:00000000000000e8 .L0 
     /tmp/ccdYPJB1.s:177    .text:00000000000000f0 .L0 
     /tmp/ccdYPJB1.s:178    .text:00000000000000f0 .L0 
     /tmp/ccdYPJB1.s:180    .text:00000000000000f4 .L0 
     /tmp/ccdYPJB1.s:184    .text:0000000000000100 .L0 
     /tmp/ccdYPJB1.s:190    .text:0000000000000100 _ZN15MemoryAllocator10tryToMergeEPNS_6memSegES1_
     /tmp/ccdYPJB1.s:193    .text:0000000000000100 .L0 
     /tmp/ccdYPJB1.s:195    .text:0000000000000100 .L0 
     /tmp/ccdYPJB1.s:196    .text:0000000000000104 .L0 
     /tmp/ccdYPJB1.s:198    .text:0000000000000108 .L0 
     /tmp/ccdYPJB1.s:200    .text:000000000000010c .L0 
     /tmp/ccdYPJB1.s:202    .text:000000000000010c .L0 
     /tmp/ccdYPJB1.s:203    .text:000000000000010c .L0 
     /tmp/ccdYPJB1.s:205    .text:0000000000000110 .L0 
     /tmp/ccdYPJB1.s:210    .text:0000000000000120 .L0 
     /tmp/ccdYPJB1.s:213    .text:0000000000000124 .L0 
     /tmp/ccdYPJB1.s:214    .text:0000000000000128 .L0 
     /tmp/ccdYPJB1.s:215    .text:0000000000000128 .L0 
     /tmp/ccdYPJB1.s:216    .text:0000000000000128 .L0 
     /tmp/ccdYPJB1.s:218    .text:000000000000012c .L0 
     /tmp/ccdYPJB1.s:221    .text:0000000000000130 .L0 
     /tmp/ccdYPJB1.s:223    .text:0000000000000130 .L0 
     /tmp/ccdYPJB1.s:224    .text:0000000000000130 .L0 
     /tmp/ccdYPJB1.s:226    .text:0000000000000134 .L0 
     /tmp/ccdYPJB1.s:229    .text:000000000000013c .L0 
     /tmp/ccdYPJB1.s:230    .text:000000000000013c .L0 
     /tmp/ccdYPJB1.s:232    .text:0000000000000140 .L0 
     /tmp/ccdYPJB1.s:234    .text:0000000000000144 .L0 
     /tmp/ccdYPJB1.s:235    .text:0000000000000144 .L0 
     /tmp/ccdYPJB1.s:237    .text:0000000000000148 .L0 
     /tmp/ccdYPJB1.s:238    .text:000000000000014c .L0 
     /tmp/ccdYPJB1.s:244    .text:000000000000014c _ZN15MemoryAllocator8mem_freeEPv
     /tmp/ccdYPJB1.s:247    .text:000000000000014c .L0 
     /tmp/ccdYPJB1.s:249    .text:000000000000014c .L0 
     /tmp/ccdYPJB1.s:250    .text:0000000000000150 .L0 
GAS LISTING /tmp/ccdYPJB1.s 			page 15


     /tmp/ccdYPJB1.s:255    .text:0000000000000160 .L0 
     /tmp/ccdYPJB1.s:256    .text:0000000000000160 .L0 
     /tmp/ccdYPJB1.s:257    .text:0000000000000160 .L0 
     /tmp/ccdYPJB1.s:258    .text:0000000000000160 .L0 
     /tmp/ccdYPJB1.s:260    .text:0000000000000164 .L0 
     /tmp/ccdYPJB1.s:263    .text:0000000000000168 .L0 
     /tmp/ccdYPJB1.s:264    .text:0000000000000168 .L0 
     /tmp/ccdYPJB1.s:267    .text:000000000000016c .L0 
     /tmp/ccdYPJB1.s:268    .text:000000000000016c .L0 
     /tmp/ccdYPJB1.s:270    .text:0000000000000174 .L0 
     /tmp/ccdYPJB1.s:272    .text:0000000000000178 .L0 
     /tmp/ccdYPJB1.s:278    .text:0000000000000180 .L0 
     /tmp/ccdYPJB1.s:279    .text:0000000000000180 .L0 
     /tmp/ccdYPJB1.s:281    .text:0000000000000184 .L0 
     /tmp/ccdYPJB1.s:282    .text:0000000000000184 .L0 
     /tmp/ccdYPJB1.s:284    .text:0000000000000188 .L0 
     /tmp/ccdYPJB1.s:285    .text:0000000000000188 .L0 
     /tmp/ccdYPJB1.s:287    .text:0000000000000190 .L0 
     /tmp/ccdYPJB1.s:288    .text:0000000000000190 .L0 
     /tmp/ccdYPJB1.s:294    .text:0000000000000198 .L0 
     /tmp/ccdYPJB1.s:298    .text:000000000000019c .L0 
     /tmp/ccdYPJB1.s:299    .text:000000000000019c .L0 
     /tmp/ccdYPJB1.s:301    .text:00000000000001a0 .L0 
     /tmp/ccdYPJB1.s:303    .text:00000000000001a4 .L0 
     /tmp/ccdYPJB1.s:306    .text:00000000000001a8 .L0 
     /tmp/ccdYPJB1.s:308    .text:00000000000001ac .L0 
     /tmp/ccdYPJB1.s:309    .text:00000000000001ac .L0 
     /tmp/ccdYPJB1.s:311    .text:00000000000001b0 .L0 
     /tmp/ccdYPJB1.s:313    .text:00000000000001b4 .L0 
     /tmp/ccdYPJB1.s:315    .text:00000000000001b8 .L0 
     /tmp/ccdYPJB1.s:317    .text:00000000000001bc .L0 
     /tmp/ccdYPJB1.s:320    .text:00000000000001c0 .L0 
     /tmp/ccdYPJB1.s:322    .text:00000000000001c4 .L0 
     /tmp/ccdYPJB1.s:324    .text:00000000000001c8 .L0 
     /tmp/ccdYPJB1.s:325    .text:00000000000001c8 .L0 
     /tmp/ccdYPJB1.s:327    .text:00000000000001cc .L0 
     /tmp/ccdYPJB1.s:328    .text:00000000000001cc .L0 
     /tmp/ccdYPJB1.s:330    .text:00000000000001d0 .L0 
     /tmp/ccdYPJB1.s:331    .text:00000000000001d0 .L0 
     /tmp/ccdYPJB1.s:333    .text:00000000000001d4 .L0 
     /tmp/ccdYPJB1.s:334    .text:00000000000001d4 .L0 
     /tmp/ccdYPJB1.s:338    .text:00000000000001e0 .L0 
     /tmp/ccdYPJB1.s:339    .text:00000000000001e0 .L0 
     /tmp/ccdYPJB1.s:342    .text:00000000000001e4 .L0 
     /tmp/ccdYPJB1.s:343    .text:00000000000001e8 .L0 
     /tmp/ccdYPJB1.s:344    .text:00000000000001e8 .L0 
     /tmp/ccdYPJB1.s:346    .text:00000000000001ec .L0 
     /tmp/ccdYPJB1.s:347    .text:00000000000001ec .L0 
     /tmp/ccdYPJB1.s:349    .text:00000000000001f0 .L0 
     /tmp/ccdYPJB1.s:352    .text:00000000000001f4 .L0 
     /tmp/ccdYPJB1.s:355    .text:00000000000001f8 .L0 
     /tmp/ccdYPJB1.s:359    .text:00000000000001fc .L0 
     /tmp/ccdYPJB1.s:361    .text:00000000000001fc .L0 
     /tmp/ccdYPJB1.s:362    .text:00000000000001fc .L0 
     /tmp/ccdYPJB1.s:364    .text:0000000000000200 .L0 
     /tmp/ccdYPJB1.s:365    .text:0000000000000200 .L0 
     /tmp/ccdYPJB1.s:367    .text:0000000000000204 .L0 
GAS LISTING /tmp/ccdYPJB1.s 			page 16


     /tmp/ccdYPJB1.s:368    .text:0000000000000204 .L0 
     /tmp/ccdYPJB1.s:370    .text:0000000000000208 .L0 
     /tmp/ccdYPJB1.s:371    .text:0000000000000208 .L0 
     /tmp/ccdYPJB1.s:373    .text:0000000000000210 .L0 
     /tmp/ccdYPJB1.s:374    .text:0000000000000210 .L0 
     /tmp/ccdYPJB1.s:380    .text:0000000000000220 .L0 
     /tmp/ccdYPJB1.s:381    .text:0000000000000220 .L0 
     /tmp/ccdYPJB1.s:386    .text:0000000000000228 .L0 
     /tmp/ccdYPJB1.s:387    .text:0000000000000228 .L0 
     /tmp/ccdYPJB1.s:389    .text:000000000000022c .L0 
     /tmp/ccdYPJB1.s:390    .text:000000000000022c .L0 
     /tmp/ccdYPJB1.s:392    .text:0000000000000230 .L0 
     /tmp/ccdYPJB1.s:394    .text:0000000000000234 .L0 
     /tmp/ccdYPJB1.s:395    .text:0000000000000234 .L0 
     /tmp/ccdYPJB1.s:397    .text:0000000000000238 .L0 
     /tmp/ccdYPJB1.s:398    .text:0000000000000238 .L0 
     /tmp/ccdYPJB1.s:400    .text:000000000000023c .L0 
     /tmp/ccdYPJB1.s:401    .text:000000000000023c .L0 
     /tmp/ccdYPJB1.s:407    .text:000000000000024c .L0 
     /tmp/ccdYPJB1.s:408    .text:000000000000024c .L0 
     /tmp/ccdYPJB1.s:413    .text:000000000000025c .L0 
     /tmp/ccdYPJB1.s:414    .text:000000000000025c .L0 
     /tmp/ccdYPJB1.s:419    .text:0000000000000264 .L0 
     /tmp/ccdYPJB1.s:422    .text:000000000000026c .L0 
     /tmp/ccdYPJB1.s:431    .data:0000000000000000 _ZN15MemoryAllocator10memSegSizeE
     /tmp/ccdYPJB1.s:438    .bss:0000000000000000 _ZN15MemoryAllocator11freeSegHeadE
     /tmp/ccdYPJB1.s:435    .bss:0000000000000000 .LANCHOR0
     /tmp/ccdYPJB1.s:444    .text:000000000000026c .L0 
     /tmp/ccdYPJB1.s:22     .text:000000000000000c .L0 
     /tmp/ccdYPJB1.s:24     .text:0000000000000018 .L0 
     /tmp/ccdYPJB1.s:28     .text:0000000000000024 .L0 
     /tmp/ccdYPJB1.s:68     .text:0000000000000060 .L0 
     /tmp/ccdYPJB1.s:161    .text:00000000000000d4 .L0 
     /tmp/ccdYPJB1.s:180    .text:00000000000000f4 .L0 
     /tmp/ccdYPJB1.s:268    .text:000000000000016c .L0 
     /tmp/ccdYPJB1.s:285    .text:0000000000000188 .L0 
     /tmp/ccdYPJB1.s:371    .text:0000000000000208 .L0 
     /tmp/ccdYPJB1.s:90     .text:0000000000000084 .L4
     /tmp/ccdYPJB1.s:73     .text:000000000000006c .L5
     /tmp/ccdYPJB1.s:145    .text:00000000000000c8 .L3
     /tmp/ccdYPJB1.s:165    .text:00000000000000e0 .L7
     /tmp/ccdYPJB1.s:127    .text:00000000000000b8 .L8
     /tmp/ccdYPJB1.s:155    .text:00000000000000d4 .L9
     /tmp/ccdYPJB1.s:134    .text:00000000000000c0 .L10
     /tmp/ccdYPJB1.s:175    .text:00000000000000f0 .L11
     /tmp/ccdYPJB1.s:220    .text:0000000000000130 .L16
     /tmp/ccdYPJB1.s:211    .text:0000000000000124 .L13
     /tmp/ccdYPJB1.s:276    .text:0000000000000180 .L28
     /tmp/ccdYPJB1.s:296    .text:000000000000019c .L18
     /tmp/ccdYPJB1.s:340    .text:00000000000001e4 .L19
     /tmp/ccdYPJB1.s:304    .text:00000000000001a8 .L20
     /tmp/ccdYPJB1.s:292    .text:0000000000000198 .L25
     /tmp/ccdYPJB1.s:318    .text:00000000000001c0 .L21
     /tmp/ccdYPJB1.s:417    .text:0000000000000264 .L26
     /tmp/ccdYPJB1.s:358    .text:00000000000001fc .L29
     /tmp/ccdYPJB1.s:384    .text:0000000000000228 .L23
     /tmp/ccdYPJB1.s:869    .debug_abbrev:0000000000000000 .Ldebug_abbrev0
GAS LISTING /tmp/ccdYPJB1.s 			page 17


     /tmp/ccdYPJB1.s:1620   .debug_str:000000000000014b .LASF33
     /tmp/ccdYPJB1.s:1640   .debug_str:000000000000029d .LASF34
     /tmp/ccdYPJB1.s:1658   .debug_str:0000000000000350 .LASF35
     /tmp/ccdYPJB1.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccdYPJB1.s:441    .text:000000000000026c .Letext0
     /tmp/ccdYPJB1.s:1576   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccdYPJB1.s:1628   .debug_str:0000000000000234 .LASF0
     /tmp/ccdYPJB1.s:1612   .debug_str:0000000000000100 .LASF1
     /tmp/ccdYPJB1.s:1606   .debug_str:00000000000000d5 .LASF2
     /tmp/ccdYPJB1.s:1594   .debug_str:000000000000006e .LASF4
     /tmp/ccdYPJB1.s:1610   .debug_str:00000000000000ee .LASF3
     /tmp/ccdYPJB1.s:1584   .debug_str:000000000000002c .LASF5
     /tmp/ccdYPJB1.s:1580   .debug_str:0000000000000009 .LASF6
     /tmp/ccdYPJB1.s:1600   .debug_str:0000000000000092 .LASF7
     /tmp/ccdYPJB1.s:1634   .debug_str:000000000000026b .LASF8
     /tmp/ccdYPJB1.s:1592   .debug_str:0000000000000060 .LASF9
     /tmp/ccdYPJB1.s:1662   .debug_str:0000000000000373 .LASF10
     /tmp/ccdYPJB1.s:1602   .debug_str:00000000000000a5 .LASF11
     /tmp/ccdYPJB1.s:1654   .debug_str:0000000000000336 .LASF12
     /tmp/ccdYPJB1.s:1642   .debug_str:00000000000002b5 .LASF13
     /tmp/ccdYPJB1.s:1614   .debug_str:0000000000000113 .LASF14
     /tmp/ccdYPJB1.s:1596   .debug_str:0000000000000075 .LASF15
     /tmp/ccdYPJB1.s:1636   .debug_str:000000000000027b .LASF16
     /tmp/ccdYPJB1.s:1582   .debug_str:000000000000001c .LASF36
     /tmp/ccdYPJB1.s:1598   .debug_str:000000000000008b .LASF37
     /tmp/ccdYPJB1.s:1652   .debug_str:000000000000032a .LASF17
     /tmp/ccdYPJB1.s:1586   .debug_str:0000000000000033 .LASF18
     /tmp/ccdYPJB1.s:1660   .debug_str:000000000000036e .LASF19
     /tmp/ccdYPJB1.s:1656   .debug_str:0000000000000346 .LASF20
     /tmp/ccdYPJB1.s:1650   .debug_str:0000000000000309 .LASF22
     /tmp/ccdYPJB1.s:1644   .debug_str:00000000000002c5 .LASF21
     /tmp/ccdYPJB1.s:1604   .debug_str:00000000000000b4 .LASF23
     /tmp/ccdYPJB1.s:1646   .debug_str:00000000000002ce .LASF38
     /tmp/ccdYPJB1.s:1618   .debug_str:000000000000012a .LASF39
     /tmp/ccdYPJB1.s:1638   .debug_str:0000000000000291 .LASF24
     /tmp/ccdYPJB1.s:1608   .debug_str:00000000000000e3 .LASF25
     /tmp/ccdYPJB1.s:1624   .debug_str:0000000000000214 .LASF40
     /tmp/ccdYPJB1.s:1616   .debug_str:000000000000011f .LASF41
     /tmp/ccdYPJB1.s:1648   .debug_str:00000000000002d8 .LASF42
     /tmp/ccdYPJB1.s:1590   .debug_str:000000000000003d .LASF26
     /tmp/ccdYPJB1.s:1632   .debug_str:0000000000000249 .LASF27
     /tmp/ccdYPJB1.s:191    .text:0000000000000100 .LFB6
     /tmp/ccdYPJB1.s:239    .text:000000000000014c .LFE6
     /tmp/ccdYPJB1.s:1622   .debug_str:000000000000020f .LASF28
     /tmp/ccdYPJB1.s:1578   .debug_str:0000000000000000 .LASF29
     /tmp/ccdYPJB1.s:245    .text:000000000000014c .LFB5
     /tmp/ccdYPJB1.s:423    .text:000000000000026c .LFE5
     /tmp/ccdYPJB1.s:1410   .debug_loc:0000000000000000 .LLST4
     /tmp/ccdYPJB1.s:1440   .debug_loc:0000000000000085 .LLST5
     /tmp/ccdYPJB1.s:1588   .debug_str:0000000000000038 .LASF30
     /tmp/ccdYPJB1.s:1466   .debug_loc:00000000000000e8 .LLST6
     /tmp/ccdYPJB1.s:336    .text:00000000000001e0 .LVL20
     /tmp/ccdYPJB1.s:378    .text:0000000000000220 .LVL25
     /tmp/ccdYPJB1.s:405    .text:000000000000024c .LVL28
     /tmp/ccdYPJB1.s:411    .text:000000000000025c .LVL29
     /tmp/ccdYPJB1.s:54     .text:0000000000000050 .LFB4
     /tmp/ccdYPJB1.s:185    .text:0000000000000100 .LFE4
GAS LISTING /tmp/ccdYPJB1.s 			page 18


     /tmp/ccdYPJB1.s:1485   .debug_loc:0000000000000144 .LLST0
     /tmp/ccdYPJB1.s:1496   .debug_loc:000000000000017a .LLST1
     /tmp/ccdYPJB1.s:1516   .debug_loc:00000000000001d7 .LLST2
     /tmp/ccdYPJB1.s:1630   .debug_str:0000000000000241 .LASF31
     /tmp/ccdYPJB1.s:1568   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccdYPJB1.s:1626   .debug_str:000000000000022d .LASF32
     /tmp/ccdYPJB1.s:1544   .debug_loc:000000000000025a .LLST3
     /tmp/ccdYPJB1.s:10     .text:0000000000000000 .LFB3
     /tmp/ccdYPJB1.s:48     .text:0000000000000050 .LFE3
     /tmp/ccdYPJB1.s:248    .text:000000000000014c .LVL13
     /tmp/ccdYPJB1.s:273    .text:000000000000017c .LVL15
     /tmp/ccdYPJB1.s:275    .text:0000000000000180 .LVL16
     /tmp/ccdYPJB1.s:289    .text:0000000000000194 .LVL17
     /tmp/ccdYPJB1.s:353    .text:00000000000001f4 .LVL22
     /tmp/ccdYPJB1.s:357    .text:00000000000001fc .LVL23
     /tmp/ccdYPJB1.s:265    .text:000000000000016c .LVL14
     /tmp/ccdYPJB1.s:350    .text:00000000000001f0 .LVL21
     /tmp/ccdYPJB1.s:291    .text:0000000000000198 .LVL18
     /tmp/ccdYPJB1.s:376    .text:0000000000000218 .LVL24
     /tmp/ccdYPJB1.s:383    .text:0000000000000228 .LVL26
     /tmp/ccdYPJB1.s:403    .text:0000000000000244 .LVL27
     /tmp/ccdYPJB1.s:416    .text:0000000000000264 .LVL30
     /tmp/ccdYPJB1.s:420    .text:0000000000000268 .LVL31
     /tmp/ccdYPJB1.s:57     .text:0000000000000050 .LVL0
     /tmp/ccdYPJB1.s:69     .text:0000000000000068 .LVL1
     /tmp/ccdYPJB1.s:82     .text:0000000000000078 .LVL3
     /tmp/ccdYPJB1.s:87     .text:0000000000000080 .LVL4
     /tmp/ccdYPJB1.s:143    .text:00000000000000c8 .LVL7
     /tmp/ccdYPJB1.s:154    .text:00000000000000d4 .LVL8
     /tmp/ccdYPJB1.s:72     .text:000000000000006c .LVL2
     /tmp/ccdYPJB1.s:133    .text:00000000000000c0 .LVL6
     /tmp/ccdYPJB1.s:162    .text:00000000000000dc .LVL9
     /tmp/ccdYPJB1.s:164    .text:00000000000000e0 .LVL10
     /tmp/ccdYPJB1.s:181    .text:00000000000000fc .LVL11
     /tmp/ccdYPJB1.s:106    .text:0000000000000098 .LVL5
     /tmp/ccdYPJB1.s:445    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccdYPJB1.s:99     .text:0000000000000090 .LBB3
     /tmp/ccdYPJB1.s:135    .text:00000000000000c0 .LBE3
     /tmp/ccdYPJB1.s:158    .text:00000000000000d4 .LBB4
     /tmp/ccdYPJB1.s:166    .text:00000000000000e0 .LBE4

UNDEFINED SYMBOLS
HEAP_START_ADDR
HEAP_END_ADDR
